name: Release Python Package

on:
  push:
    branches: [master]
  workflow_run:
    workflows: ["Tests"]
    types: [completed]
    branches: [next]

concurrency:
  group: release-package-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build, Version & Publish
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.head_commit.message, 'skip ci')
      && !contains(github.event.head_commit.message, 'ci skip')

    permissions:
      contents: write

    outputs:
      new_release: ${{ steps.version.outputs.new_release }}
      new_version: ${{ steps.version.outputs.new_version }}
      log: ${{ steps.changelog.outputs.log }}

    steps:
      - name: Setup | Checkout Repository (master)
        if: github.event_name == 'push'
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      - name: Setup | Checkout Repository (next)
        if: github.event_name != 'push'
        uses: actions/checkout@v4
        with:
          ref: next
          fetch-depth: 0

      - name: Setup | Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}

      - name: Setup | Install Hatch
        uses: pypa/hatch@install

      - name: Action | Update version
        id: version
        run: |
          OLD_VERSION=$(hatch version)
          echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT

          hatch run version-update

          NEW_VERSION=$(hatch version)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          if [[ "${OLD_VERSION}" == "${NEW_VERSION}" ]]; then
            echo "new_release=false" >> $GITHUB_OUTPUT
          else
            echo "new_release=true" >> $GITHUB_OUTPUT
          fi

      - name: Setup | Install Node.js
        if: steps.version.outputs.new_release == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup | Install gitmoji-changelog
        if: steps.version.outputs.new_release == 'true'
        run: npm install -g gitmoji-changelog

      - name: Cleanup | Remove local prerelease tags
        if: github.event_name == 'push'
        # For a stable release, we remove all *local* prerelease tags
        # so that all commits are grouped under a single stable version
        # in the changelog.
        # Hoping that my proposal to add a feature for skipping dev
        # releases will be accepted and merged into gitmoji-changelog
        # https://github.com/frinyvonnick/gitmoji-changelog/pull/279
        run: git tag | grep -E '\-(dev|alpha|beta|rc)' | xargs -r git tag -d

      - name: Action | Update changelog
        if: steps.version.outputs.new_release == 'true'
        run: |
          gitmoji-changelog update "${{ steps.version.outputs.new_version }}" --preset generic

          START="## ${{ steps.version.outputs.new_version }}"
          END="<a name=\""
          CHANGELOG=$(awk "/$START/{flag=1; next} /^$END/{flag=0} flag" CHANGELOG.md)

          echo "📝 Changelog for ${{ steps.version.outputs.new_version }}:"
          echo "$CHANGELOG"

          echo "log<<EOF" >> "$GITHUB_OUTPUT"
          echo "$CHANGELOG" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Setup | Configure Git for GitHub Actions bot
        run: |
          git config --local user.name 'github-actions[bot]'
          git config --local user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Action | Commit version and changelog
        if: steps.version.outputs.new_release == 'true'
        run: |
          git add meringue/__init__.py
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # master branch (aka stable release) - commit changelog
            # `hatch run changelog-update` runs in append mode, which
            # means that if you save changes for a dev release,
            # they will remain in the changelog and won't be carried
            # over as part of the stable release when it comes out.
            # That's why we commit he changelog only for stable releases.
            git add CHANGELOG.md
          fi

          git commit -m "🔖 (release): Release v${{ steps.version.outputs.new_version }} [skip ci]"
          git push

      - name: Action | Build Release
        if: steps.version.outputs.new_release == 'true'
        run: hatch build

      - name: Action | Upload artifacts
        uses: actions/upload-artifact@v4
        if: steps.version.outputs.new_release == 'true'
        with:
          name: python-artifacts
          path: dist/*
          if-no-files-found: error

  publish:
    name: Publish to PyPI & GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: needs.version.outputs.new_release == 'true'

    permissions:
      id-token: write

    environment:
      name: pypi
      url: https://pypi.org/p/meringue

    steps:
      - name: Action | Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-artifacts
          path: dist

      - name: Publish | Upload to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.4

      - name: Publish | Upload to GitHub Release Assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create "v${{ needs.version.outputs.new_version }}" --notes "${{ needs.changelog.outputs.log }}" dist/*
