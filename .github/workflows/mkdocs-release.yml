name: Release Documentation

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Release Python Package"]
    types: [completed]
    branches: [master, next]

concurrency:
  group: release-docs-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build:
    name: Building & Deploying Documentation
    runs-on: ubuntu-latest
    # manual
    # without 'skip ci' and push
    # without 'skip ci' and after success 'Release Python Package' on branch (master or next)
    if: |
      github.event_name == 'workflow_dispatch'
      || (
        !contains(github.event.head_commit.message, 'skip ci')
        && !contains(github.event.head_commit.message, 'ci skip')
        && (
          github.event_name == 'push'
          || (
            github.event_name == 'workflow_run'
            && github.event.workflow_run.conclusion == 'success'
          )
        )
      )

    permissions:
      contents: write

    steps:
      - name: Setup | Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup | Determine branch name
        id: determine_branch
        run: |
          set -e

          echo "üß† Event name: ${GITHUB_EVENT_NAME}"
          echo "üîß GITHUB_REF: ${GITHUB_REF}"

          if [[ "${GITHUB_EVENT_NAME}" == "workflow_run" ]]; then
            BRANCH="${{ github.event.workflow_run.head_branch }}"
            echo "üì° Detected branch from workflow_run: $BRANCH"

          elif [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
            BRANCH="${{ github.event.pull_request.head.ref }}"
            echo "üì° Detected branch from pull_request: $BRANCH"

          elif [[ "${GITHUB_EVENT_NAME}" == "push" || "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            BRANCH="${GITHUB_REF#refs/heads/}"
            echo "üì° Detected branch from ref: $BRANCH"

          else
            echo "‚ùå Unsupported or unknown event: ${GITHUB_EVENT_NAME}"
            exit 1
          fi

          if [[ -z "$BRANCH" ]]; then
            echo "‚ùå Could not determine branch name. Exiting."
            exit 1
          fi

          echo "‚úÖ Using branch: $BRANCH"
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Setup | Set up Python runtime
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Setup | Install Hatch
        uses: pypa/hatch@install

      - name: Action | Build & Check documentation
        if: ${{ steps.determine_branch.outputs.branch == 'master' }}
        run: hatch run docs:build-check
        continue-on-error: false

      - name: Setup | Configure Git for GitHub Actions bot
        run: |
          git config --local user.name 'github-actions[bot]'
          git config --local user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Action | Build & Commit documentation
        run: |
          if [[ "${{ steps.determine_branch.outputs.branch }}" == "master" ]]; then
            MERINGUE_DOCS_VERSION=$(hatch version | grep -Eo '[0-9]\.[0-9]+' | head -1)
            echo "üöÄ Deploying docs for stable release $MERINGUE_DOCS_VERSION..."
            hatch run docs:ci-build $MERINGUE_DOCS_VERSION --update-aliases latest

          elif [[ "${{ steps.determine_branch.outputs.branch }}" == "next" ]]; then
            echo "üß™ Deploying docs for next release..."
            hatch run docs:ci-build next

          else
            echo "‚öôÔ∏è Deploying dev docs..."
            hatch run docs:ci-build dev
          fi

      - name: Action | Deploy
        run: |
          git checkout gh-pages
          git push origin gh-pages
