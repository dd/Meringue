{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Meringue <p>Full documentation for the project is available at dd.github.io/Meringue.</p> <p>Package with various functional (such as mixins, form utils, upload handlers and other) for Django Framework.</p> <p>This library is a set of various functionality that I use from project to project.</p> <p>The main task of this package is to clean up this functionality, test it, and also organize the documentation so that colleagues can understand how and what works.</p> <p>However, if someone decides to use this functionality in their project, and even more so to add functionality or change the implementation to a more correct, beautiful or understandable one, I will only be happy, do not worry and feel free to write to me by mail, create an issue or pull request on github.</p>"},{"location":"#roadmap","title":"Roadmap","text":"<p>Adding new functionality. Can change.</p> <ul> <li> drf serializer serializer for automatic form generation on the front when working through rest api. (An npm package on vuejs will also be developed generating form based on response from api).</li> <li> Authorization backend for authorization by a pair of email and password.</li> <li> Functionality for working with images.<ul> <li> Image editor like easy_thumbnails.</li> <li> A field for the drf serializer that returns a set of images (for example, a standard image and a double-sized image for a retina screen), as well as in different formats (for example, in the original format and in webp).</li> </ul> </li> <li> Functionality similar to that described in the previous paragraph only for video.</li> <li> Functionality for loading private files available through nginx internal.</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<ul> <li> Use Git Flow (read here and here) to resolve the versioning</li> <li> Linter with a Ruff</li> <li> Formatter with a Black</li> <li> Lint commit with Gitlint and Conventional Commits</li> <li> Documentation with mkdocs and mkdocs-material</li> <li> Testing local with hatch</li> <li> Testing in CI/CD on push</li> <li> Add mypy ???</li> </ul>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>Usage<ul> <li>Configurations</li> <li>Core</li> <li>API</li> </ul> </li> <li>Code Reference</li> <li>Contributing<ul> <li>Introduction</li> <li>Documentations<ul> <li>Introduction</li> <li>Examples</li> </ul> </li> <li>Tests</li> </ul> </li> <li>Changelog</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#110-2023-07-19","title":"1.1.0 (2023-07-19)","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>\u2728 (api): DRF error handler [c5546ba]</li> <li>\u2728 (core): Added a method to get links to the front [3b3171f]</li> <li>\u2728 (core): Functions for encryption and decryption [011f875]</li> <li>\u2728 (core): Universal manager for all meringue models [59d88fd,57f1af6]</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>\ud83d\udd27 (tests): Updated dependency matrix for testing [de9f435]</li> <li>\ud83d\udd27 (package): Upgrading dependency versions [3a0d745]</li> </ul>"},{"location":"changelog/#miscellaneous","title":"Miscellaneous","text":"<ul> <li>\ud83d\udd27 (github): Updated github workflows configurations [16e2272,f48c999]</li> <li>\ud83d\udcdd (docs): Documentation update [59bd450,f483929,6ba2fd7,c28409c]</li> </ul>"},{"location":"changelog/#100-2023-07-03","title":"1.0.0 (2023-07-03)","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>\u2728 (core): Added translations [ce3072e]</li> <li>\u2728 (core): Method for sorting elements [6700b69]</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>\u267b\ufe0f (core): Refactoring simply register of fields for translation [195bd02]</li> <li>\u267b\ufe0f (core): Tag refactoring and date period display utilities [0f65c21]</li> <li>\u267b\ufe0f (core): Refactoring the copyright date tag [29aa1f3]</li> <li>\u267b\ufe0f (core): Refactor Mixin publications by dates [60921ce]</li> <li>\u267b\ufe0f (core): Refactor Publication Mixins [2deac17]</li> <li>\ud83d\udcac (repo): Consolidated emails for the git log [c40d0ac]</li> <li>\ud83d\udd27 (git): Added code style check when committing changes [0715020]</li> <li>\ud83d\udd27 (git): Now we use gitmoji for commits [20b5439]</li> <li>\u267b\ufe0f (core): Refactor Upload Handlers [be985dc,a3798af]</li> <li>\u267b\ufe0f (conf): Updated package settings [4f50bbf,7b0dc93,b169cbe,0e47630]</li> <li>\ud83d\udd27 (lint): Codestyle and linter setup [42b10d3]</li> <li>\u267b\ufe0f (refactor): Codestyle and linter [96fb5dc,e3e5d2c,6889005,c946165,b4aad26]</li> <li>\ud83d\udd27 (tests): Added and configured tests [197f44d,a4a222f,64dc6d2,ff2e063,ec8cab6,2688f5e,ae7a17c]</li> <li>\ud83d\udd27 (tests): Tests on push hook to github [414093f,f5e5ac3,fad22df,8b2d6e7,05213cd,6fbe7ad,a34e34f,17a41f8,855a7a4,4f03343,bab6bad,2395a7d]</li> <li>\ud83d\udd27 (docs): Added and initially configured mkdocs [fa99cd4,b7cec98,53d65f0,5b50423,7203552,eaaeafa,241f5dd,bafc88f,360c58e,70c5a21,725df13,4a9f1d6,941914f,7eb5689,9186657]</li> <li>\ud83d\udd27 (docs): Publishing documentation in github pages [c5a1b03,ac3eb62,1aa4afe,ac2bc72,85562dc,f892e78]</li> <li>\ud83d\udd27 (docs): Build and publication of documentation ready [e63c170,1f91c9c,c00fa81]</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>\u2796 (build): Removed unnecessary dependencies [26cfe6e]</li> <li>\u2796 (refactor): Removed old functionality and unnecessary code [aeb164d,e486871,886046a]</li> </ul>"},{"location":"changelog/#miscellaneous_1","title":"Miscellaneous","text":"<ul> <li>\ud83e\udd5a (core): Im a teapot [3e46460]</li> <li>\ud83e\uddea (conf): Tests for the Settings class [20741e1,11352b6]</li> <li>\ud83c\udf10 (docs): Translation of documentation into English [5b00c3a,a4b5e8e]</li> <li>\ud83d\udcdd (docs): Documentation text update [5fd1a8c,e59522f,32dae99,ececaf9,bd4ec8d,1f1fb0b]</li> </ul>"},{"location":"changelog/#040-2023-04-27","title":"0.4.0 (2023-04-27)","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Added PublishManager.unpublished method [c64c3bf]</li> <li>Added PublishQuerySet [474d232]</li> <li>Added SortingMixin [79cea39]</li> <li>Added unify_email and unify_phone utilities [52fca41]</li> <li>Added template redefining drf base template to remove drf title [b5bab76]</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>update settings [5c0fb4d]</li> <li>update version print function [a8f6fa5]</li> </ul>"},{"location":"changelog/#miscellaneous_2","title":"Miscellaneous","text":"<ul> <li>License type changed [c48791f]</li> <li>refact: Updated package build system [304daff]</li> <li>update setup script [ea51888]</li> <li>update files permissions [0602649]</li> <li>clear code [fc56a8b]</li> <li>update settings [5c0fb4d]</li> <li>more structure updates [91f4de8]</li> <li>some fixes thumbnails [72f69e0]</li> <li>add labels for apps [2657aeb]</li> <li>rename PublishModel -&gt; PublishedBase [5d1bcce]</li> </ul>"},{"location":"changelog/#035-2015-08-25","title":"0.3.5 (2015-08-25)","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Added tag get_with_args_and_kwargs [4ba35a3]</li> <li>Added CMTimeMixin [7181497]</li> </ul>"},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>Method for renaming files moved to config [690daae]</li> </ul>"},{"location":"changelog/#miscellaneous_3","title":"Miscellaneous","text":"<ul> <li>verlib added to required dependencies</li> <li>Various fixes [b149eef,27f6fdd,4efb75c,1501eb0,528812d,cbd8d2b,492ec55,94d2c6c,ead91c3]</li> <li>upload_handlers fix hash [833a033]</li> <li>Deprecate get_version [1534329]</li> <li>Setup reconfigure [fe928fa]</li> </ul>"},{"location":"changelog/#034-2015-08-22","title":"0.3.4 (2015-08-22)","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Added documentation with sphinx [dd0ff73]</li> <li>Added add_placeholder tag to set placeholder field [9a1847b]</li> </ul>"},{"location":"changelog/#miscellaneous_4","title":"Miscellaneous","text":"<ul> <li>Updated dependencies</li> <li>upload_handlers fixed to work with django 1.8 [0d85888]</li> </ul>"},{"location":"changelog/#033-2015-05-09","title":"0.3.3 (2015-05-09)","text":""},{"location":"changelog/#miscellaneous_5","title":"Miscellaneous","text":"<ul> <li> <p>put_css/put_js:</p> </li> <li> <p>\u043f\u043e\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 .map</p> </li> <li>\u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 MERINGUE_LOAD_MINI \u0432 settings \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u043c\u0438\u043d\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u0438\u043b\u0438 \u043d\u0435\u0442 (default = DEBUG)</li> </ul> <p></p>"},{"location":"changelog/#032-2015-05-09","title":"0.3.2 (2015-05-09)","text":""},{"location":"changelog/#miscellaneous_6","title":"Miscellaneous","text":"<ul> <li>fix PutStatic._fix_map_link [a69232e]</li> </ul>"},{"location":"changelog/#031-2015-05-07","title":"0.3.1 (2015-05-07)","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Added get_version method [a63fc47]</li> <li>Added unify_email to unify emails</li> <li>Added put_js</li> <li>Added put_css</li> <li>Added put_reset</li> </ul>"},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>Updated build in egg [4828fa2]</li> <li>Text printing, replaced by logging [e1ccffd]</li> <li>upload_handlers now uses sha256 instead of md5</li> <li>Updated dependencies</li> </ul>"},{"location":"changelog/#miscellaneous_7","title":"Miscellaneous","text":"<ul> <li>\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0430 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0430\u044f formset_factory \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e \u0431\u044b \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u044f\u043b\u0430 \u043f\u0440\u0435\u0444\u0438\u043a\u0441 \u043d\u0430 \u0432\u0441\u0435 \u0444\u043e\u0440\u043c\u044b \u043d\u0430\u0431\u043e\u0440\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0435</li> <li>form_fieldsets - \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u0442 \u0444\u043e\u0440\u043c\u0443 \u043f\u043e \u0433\u0440\u0443\u043f\u043f\u0430\u043c (fieldset)</li> <li>\u0428\u0430\u0431\u043b\u043e\u043d\u043d\u044b\u0439 \u0442\u0435\u0433 field_render \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043f\u043e\u043b\u044f \u0444\u043e\u0440\u043c \u0432 \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u0432\u0438\u0434\u0435</li> <li>\u0428\u0430\u0431\u043b\u043e\u043d\u043d\u044b\u0439 \u0442\u0435\u0433 field_render_classes \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0434\u043b\u044f \u043f\u043e\u043b\u044f</li> <li>\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 anonymous_required \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u044e\u0449\u0438\u0439 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0435\u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439</li> </ul>"},{"location":"changelog/#030-2014-07-13","title":"0.3.0 (2014-07-13)","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>Added GetAbsoluteUrlMixin</li> <li>Added PreviewImageFileInput</li> </ul>"},{"location":"changelog/#changed_5","title":"Changed","text":"<ul> <li>Renaming files in upload_handlers using file hash sum</li> </ul>"},{"location":"changelog/#miscellaneous_8","title":"Miscellaneous","text":"<ul> <li>Library build in egg</li> <li>Refinement of existing opportunities</li> <li>Documentation + tasklist [fa248d1,541ee26,19bf3e9]</li> <li>LICENSE GNU GPL v3 [239df42]</li> <li>Lint [6b3337f]</li> <li>Fixed bug with UrlPatterns if name is not urls.py</li> </ul>"},{"location":"dev/contributing/","title":"Contributing","text":"<p>Please don't be shy - comment, discuss and suggest whatever you think is important in the discussions on github, if you notice a bug please describe it in issues, and if you decide to contribute to the development of the project, feel free to send pull request, and if possible, read further during development this section.</p> <p>When developing, modifying and fixing a feature, please fill in and correct all annotations and docstrings in the code, and also try, if possible, to fill in / supplement the description of the functionality and its use in the section of the documentation, also add tests for new or fixed functionality, read more below:</p>"},{"location":"dev/contributing/#environment","title":"Environment","text":"<p>To work, you need a configured environment, for this there is the following script:</p> <pre><code>$ hatch run init\n</code></pre> <p>Note</p> <p>All development is done using hatch. To work with it, you will need to install it globally, I advise you to do this using pipx.</p> <p>This script will completely configure the environment - configure gitflow, connect git hooks, and install and configure a virtual environment, to run python in this environment, run the following command:</p> <pre><code>$ hatch run ipython\n</code></pre>"},{"location":"dev/contributing/#git-flow","title":"Git flow","text":"<p>As you develop and refine, please try to keep your repository consistent with gitflow.</p> <p>Question</p> <p>Probably this point will change, the library is actively developed, I took this approach as a familiar one, however, I think that it will need to be changed. If you have any suggestions I'll be happy to listen.</p>"},{"location":"dev/contributing/#internationalization","title":"Internationalization","text":"<p>To add translations there are two useful commands:</p>"},{"location":"dev/contributing/#makemessages","title":"<code>makemessages</code>","text":"<pre><code>$ hatch run makemessages\n</code></pre> <p>This is a wrapper around the makemessages django command and creates/updates localization files in each meringue application.</p>"},{"location":"dev/contributing/#compilemessages","title":"<code>compilemessages</code>","text":"<pre><code>$ hatch run compilemessages\n</code></pre> <p>This is a wrapper around the compilemessages django command and compiles all translations.</p>"},{"location":"dev/contributing/#tests","title":"Tests","text":"<p>When working on a project, it is extremely important to cover everything with tests in order to avoid problems and errors in the code. See working on tests in the appropriate section.</p>"},{"location":"dev/contributing/#documentation","title":"Documentation","text":"<p>The documentation is implemented using the mkdocs generator and the mkdocs material theme. When working on library functionality, two main sections usage and reference are important. For more information about developing documentation, see the corresponding section.</p>"},{"location":"dev/contributing/#versioning","title":"Versioning","text":"<p>To update the version, use hatch version</p> <p>show current version:</p> <pre><code>$ hatch version\n1.0.0a0\n</code></pre> <p>update patch and beta version from <code>1.0.0a0</code> to <code>1.0.1b0</code></p> <pre><code>$ hatch version patch,beta\nOld: 1.0.0a0\nNew: 1.0.1b0\n</code></pre>"},{"location":"dev/contributing/#commit-message-convention","title":"Commit message convention","text":"<p>To write a commit, we adhere to the Conventional Commits specification, as well as gitmoji as a special case of conventional commits. You can use gitmoji-cli for this process. This is necessary for the automatic generation of the changelog.</p> <p>Info</p> <p>The list of emoji needs to be improved, now it is bloated and there are controversial points like  which means deleting the code...</p>"},{"location":"dev/contributing/#changelog-generation","title":"Changelog generation","text":"<p>You can generate a Changelog with the following command using gitmoji-changelog:</p> <pre><code>gitmoji-changelog update 1.0.0 --preset generic --group-similar-commits\n</code></pre>"},{"location":"dev/contributing/#building-and-publishing","title":"Building and publishing","text":"<p>For the build, hatch is used and to build the library there is the following command:</p> <pre><code>$ hatch build\n</code></pre> <p>This command is provided by hatch and for more details on how it works, it is better to look at the hatch documentation.</p> <p>The build and upload of releases is implemented in GitHub Actions and occurs automatically when pushing release tags like <code>v*</code>.</p> <p>More details on how to set up a build and upload can be found in the workflow config.</p>"},{"location":"dev/tests/","title":"Tests","text":"<p>The project uses pytest for testing, as well as set up coverage tests using pytest-cov, it is highly recommended for review.</p>"},{"location":"dev/tests/#usage","title":"Usage","text":"<p>You can run tests in a development environment with the following command:</p> <pre><code>$ hatch run test:check\n</code></pre> <p>A matrix for a set of python and django versions is also configured in hatch, you can see more about this in the settings in the <code>pyproject.toml</code> file, you can run the entire test matrix with the hatch script:</p> <pre><code>$ hatch run mtest:check\n</code></pre>"},{"location":"dev/tests/#development","title":"Development","text":"<p>When developing tests, you may need to create new migrations, this can be done with the following command</p> <pre><code>$ hatch run test:makemigrations\n</code></pre> <p>The application used in the tests lies in the <code>test_project</code> directory.</p> <p>The database is used by in-memory SQLite.</p>"},{"location":"dev/tests/#autotests","title":"Autotests","text":"<p>Tests are automatically processed when pushing to <code>master</code> and release branches <code>release/*</code>. See workflow config for details.</p> <p>In the process, test results are uploaded to codecov.io.</p>"},{"location":"dev/docs/","title":"Documentation","text":"<p>To develop documentation, use mkdocs with the theme mkdocs-material.</p> <p>Sources for documentation generation parse mkdocstring-python which can handle multiple formats, we use Google-style (this only applies to docstrings), but not pure, and its variation is napoleon (But of course this is a debatable issue, and we can change if there are suggestions).</p>"},{"location":"dev/docs/#local-development","title":"Local development","text":"<p>In the simplest case, running a local server with development documentation would look like this:</p> <pre><code>$ hatch run docs:serve\n</code></pre>"},{"location":"dev/docs/#configuration","title":"Configuration","text":"<p>There are several options for documentation configuration:</p>"},{"location":"dev/docs/#meringue_mkdocs_code_parce_enabled","title":"<code>MERINGUE_MKDOCS_CODE_PARCE_ENABLED</code>","text":"<p><code>default: true</code></p> <p>Enabling / disabling the output of sources in the documentation \"on-the-fly\" (organized based on the example from the mkdocstrings documentation).</p>"},{"location":"dev/docs/#meringue_mkdocs_code_parce_source_path","title":"<code>MERINGUE_MKDOCS_CODE_PARCE_SOURCE_PATH</code>","text":"<p><code>default: \"meringue\"</code></p> <p>A directory with sources for \"on-the-fly\" generation.</p>"},{"location":"dev/docs/#meringue_mkdocs_code_parce_docs_path","title":"<code>MERINGUE_MKDOCS_CODE_PARCE_DOCS_PATH</code>","text":"<p><code>default: \"reference\"</code></p> <p>Documentation directory for displaying \"on-the-fly\" generated source documentation.</p>"},{"location":"dev/docs/#meringue_mkdocs_code_parce_show_nav","title":"<code>MERINGUE_MKDOCS_CODE_PARCE_SHOW_NAV</code>","text":"<p><code>default: false</code></p> <p>Parameter for debugging generated \"on-the-fly\" navigation.</p>"},{"location":"dev/docs/#meringue_mkdocs_enabled_git_revision_date","title":"<code>MERINGUE_MKDOCS_ENABLED_GIT_REVISION_DATE</code>","text":"<p><code>default: true</code></p> <p>Option to enable/disable modification dates for documentation files. It will be useful to disable it when developing locally so that the console is not clogged with errors.</p>"},{"location":"dev/docs/#meringue_mkdocs_offline","title":"<code>MERINGUE_MKDOCS_OFFLINE</code>","text":"<p><code>default: false</code></p> <p>Parameter for building documentation into a build working from a folder, without the need to start the server. read more about the mechanism here.</p>"},{"location":"dev/docs/#meringue_mkdocs_enable_minify","title":"<code>MERINGUE_MKDOCS_ENABLE_MINIFY</code>","text":"<p><code>default: true</code></p> <p>Parameter to enable plugin minify minifying html, js and css when generating documentation.</p> <p>When working with local server documentation, this option is disabled.</p>"},{"location":"dev/docs/#building-and-publishing","title":"Building and publishing","text":"<p>There is a separate <code>hatch run docs:build</code> command for building documentation.</p> <p>But before pushing the updated documentation, please run the <code>hatch run docs:build-check</code> command, it will build the documentation and check the links for broken ones.</p> <p>Documentation is collected in GitHub Actions and uploaded to the gh-pages branch and published using GitHub Pages.</p> <p>The documentation is automatically collected and rolled out when pushing the release tag (<code>v*</code>), and when pushing to the <code>dev</code> branch, the dev version of the documentation is updated. You can learn more about these processes in the releasel and dev workflow configs.</p>"},{"location":"dev/docs/examples/","title":"Examples of blocks for writing documentation","text":"<p>A collection of examples of non-obvious blocks that can be used when writing documentation.</p>"},{"location":"dev/docs/examples/#admonitions","title":"Admonitions","text":"<p>docs | supported types</p> CodePreview <pre><code>!!! note\n\n\tYou should note that the title will be automatically capitalized.\n</code></pre> <p>Note</p> <p>You should note that the title will be automatically capitalized.</p>"},{"location":"dev/docs/examples/#inline-usage","title":"inline usage","text":"inline end inline <p>Lorem ipsum</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>!!! info inline end \"Lorem ipsum\"\n\n\tLorem ipsum dolor sit amet, consectetur\n\tadipiscing elit. Nulla et euismod nulla.\n\tCurabitur feugiat, tortor non consequat\n\tfinibus, justo purus auctor massa, nec\n\tsemper lorem quam in massa.\n</code></pre> <p>Use <code>inline end</code> to align to the right (left for rtl languages).</p> <p>Lorem ipsum</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>!!! info inline \"Lorem ipsum\"\n\n\tLorem ipsum dolor sit amet, consectetur\n\tadipiscing elit. Nulla et euismod nulla.\n\tCurabitur feugiat, tortor non consequat\n\tfinibus, justo purus auctor massa, nec\n\tsemper lorem quam in massa.\n</code></pre> <p>Use <code>inline</code> to align to the left (right for rtl languages).</p>"},{"location":"dev/docs/examples/#collapsible-blocks","title":"Collapsible blocks","text":"<p>docs</p> <pre><code>???+ note \"Open styled details\"\n\n\t??? danger \"Nested details!\"\n\t\tAnd more content again.\n</code></pre> Open styled details Nested details! <p>And more content again.</p>"},{"location":"dev/docs/examples/#footnotes","title":"Footnotes","text":"<p>docs</p> <pre><code>Footnotes[^1] have a label[^test-label] and the footnote's content.\n\n[^1]: This is a footnote content.\n[^test-label]: A footnote on the label: \"test-label\".\n</code></pre> <p>Footnotes1 have a label2 and the footnote's content.</p>"},{"location":"dev/docs/examples/#highlight","title":"Highlight","text":"<p>docs</p> CodePreview <pre><code>```console linenums=\"42\" hl_lines=\"1 4-6\"\n$ echo hello world!\nhello world!\n\n$ git clone git@github.com:dd/Meringue.git\n$ cd Meringue\n$ hatch run docs:serve\nINFO     -  Building documentation...\nINFO     -  Cleaning site directory\nINFO     -  mkdocstrings_handlers: Formatting signatures requires Black to be\n\t\t\tinstalled.\nINFO     -  Documentation built in 1.96 seconds\nINFO     -  [02:05:37] Watching paths for changes: 'docs/src', 'mkdocs.yml',\n\t\t\t'docs/theme', 'meringue', 'README.md'\nINFO     -  [02:05:37] Serving on http://127.0.0.1:7000/\n```\n</code></pre> <pre><code>```pycon\n&gt;&gt;&gt; for word in (\"Hello\", \"mkdocstrings!\"):\n...     print(word, end=\" \")\n...\nHello mkdocstrings!\n```\n</code></pre> <pre><code>$ echo hello world!\nhello world!\n$ git clone git@github.com:dd/Meringue.git\n$ cd Meringue\n$ hatch run docs:serve\nINFO     -  Building documentation...\nINFO     -  Cleaning site directory\nINFO     -  mkdocstrings_handlers: Formatting signatures requires Black to be\n\t\t\tinstalled.\nINFO     -  Documentation built in 1.96 seconds\nINFO     -  [02:05:37] Watching paths for changes: 'docs/src', 'mkdocs.yml',\n\t\t\t'docs/theme', 'meringue', 'README.md'\nINFO     -  [02:05:37] Serving on http://127.0.0.1:7000/\n</code></pre> <pre><code>&gt;&gt;&gt; for word in (\"Hello\", \"mkdocstrings!\"):\n...     print(word, end=\" \")\n...\nHello mkdocstrings!\n</code></pre>"},{"location":"dev/docs/examples/#inline","title":"Inline","text":"<p>docs</p> <pre><code>`#!console $ python3 manage.py runserver`\n</code></pre> <p><code>$ python3 manage.py runserver</code></p> <pre><code>`#!python3 import this`\n</code></pre> <p><code>import this</code></p>"},{"location":"dev/docs/examples/#annotates","title":"Annotates","text":"<p>docs</p> <pre><code>```python\nimport this # (1)\n```\n1.  :fontawesome-brands-python: Simple is better than complex.\n</code></pre> <pre><code>import this # (1)\n</code></pre> <ol> <li> Simple is better than complex.</li> </ol>"},{"location":"dev/docs/examples/#diagrams","title":"Diagrams","text":"<p>docs</p> <pre><code>```mermaid\ngraph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];\n```\n</code></pre> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre>"},{"location":"dev/docs/examples/#content-tabs","title":"Content tabs","text":"<p>docs</p> <pre><code>=== \"Tab 1\"\n\tMarkdown **content**.\n\n\tMultiple paragraphs.\n\n=== \"Tab 2\"\n\tMore Markdown **content**.\n\n- list item a\n\t- list item b\n</code></pre> Tab 1Tab 2 <p>Markdown content.</p> <p>Multiple paragraphs.</p> <p>More Markdown content.</p> <ul> <li>list item a</li> <li>list item b</li> </ul>"},{"location":"dev/docs/examples/#smart-symbols","title":"Smart Symbols","text":"<p>docs</p> Markdown Result Markdown Result <code>(tm)</code> \u2122 <code>&lt;--</code> \u2190 <code>(c)</code> \u00a9 <code>&lt;--&gt;</code> \u2194 <code>(r)</code> \u00ae <code>=/=</code> \u2260 <code>c/o</code> \u2105 <code>1/4, etc.</code> \u00bc, etc. <code>+/-</code> \u00b1 <code>1st 2nd etc.</code> 1st 2nd etc. <code>--&gt;</code> \u2192"},{"location":"dev/docs/examples/#keys","title":"Keys","text":"<p>docs</p> <pre><code>++ctrl+alt+delete++\n</code></pre> <p>Ctrl+Alt+Del</p>"},{"location":"dev/docs/examples/#icons-and-emojis","title":"Icons and Emojis","text":"<p>docs | icon search</p> <pre><code>:fontawesome-brands-twitter:{ .twitter } :smile: :heart: :thumbsup:\n</code></pre> <p> </p>"},{"location":"dev/docs/examples/#tooltips","title":"Tooltips","text":"<p>docs</p> <pre><code>[Hover me](https://example.com \"I'm a tooltip!\")\n</code></pre> <p>Hover me</p>"},{"location":"dev/docs/examples/#lists","title":"Lists","text":"<p>docs</p> CodePreview <pre><code>- [X] item 1\n\t* [X] item A\n\t* [ ] item B\n\t\tmore text\n\t\t+ [x] item a\n\t\t+ [ ] item b\n\t\t+ [x] item c\n\t* [X] item C\n- [ ] item 2\n- [ ] item 3\n</code></pre> <ul> <li> item 1<ul> <li> item A</li> <li> item B     more text<ul> <li> item a</li> <li> item b</li> <li> item c</li> </ul> </li> <li> item C</li> </ul> </li> <li> item 2</li> <li> item 3</li> </ul>"},{"location":"dev/docs/examples/#tables","title":"Tables","text":"<p>docs</p> CodePreview <pre><code>First Header | Second Header\n------------ | -------------\nContent Cell | Content Cell\nContent Cell | Content Cell\n</code></pre> First Header Second Header Content Cell Content Cell Content Cell Content Cell <ol> <li> <p>This is a footnote content.\u00a0\u21a9</p> </li> <li> <p>A footnote on the label: \"test-label\".\u00a0\u21a9</p> </li> </ol>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>conf<ul> <li>_init_.py</li> <li>default_settings.py</li> </ul> </li> <li>core<ul> <li>utils<ul> <li>_init_.py</li> <li>crypt.py</li> <li>datetime.py</li> <li>frontend.py</li> </ul> </li> <li>templatetags<ul> <li>_init_.py</li> <li>meringue_base.py</li> </ul> </li> <li>_init_.py</li> <li>apps.py</li> <li>models.py</li> <li>options.py</li> <li>query.py</li> <li>translation.py</li> <li>upload_handlers.py</li> <li>views.py</li> </ul> </li> <li>api<ul> <li>docs<ul> <li>_init_.py</li> <li>patchers.py</li> <li>views.py</li> </ul> </li> <li>_init_.py</li> <li>apps.py</li> <li>handlers.py</li> <li>routers.py</li> <li>utils.py</li> </ul> </li> <li>_init_.py</li> </ul>"},{"location":"reference/meringue/__init__/","title":"__init__.py","text":""},{"location":"reference/meringue/__init__/#meringue","title":"meringue","text":""},{"location":"reference/meringue/__init__/#meringue.__version__","title":"__version__  <code>module-attribute</code>","text":"<pre><code>__version__ = '1.1.0.dev6'\n</code></pre> <p>To update the version, use hatch version</p> <p>show current version:</p> <pre><code>$ hatch version\n1.0.0a0\n</code></pre> <p>update patch and beta version from <code>1.0.0a0</code> to <code>1.0.1b0</code></p> <pre><code>$ hatch version patch,beta\nOld: 1.0.0a0\nNew: 1.0.1b0\n</code></pre>"},{"location":"reference/meringue/api/__init__/","title":"__init__.py","text":""},{"location":"reference/meringue/api/__init__/#meringue.api","title":"meringue.api","text":""},{"location":"reference/meringue/api/apps/","title":"apps.py","text":""},{"location":"reference/meringue/api/apps/#meringue.api.apps","title":"meringue.api.apps","text":""},{"location":"reference/meringue/api/handlers/","title":"handlers.py","text":""},{"location":"reference/meringue/api/handlers/#meringue.api.handlers","title":"meringue.api.handlers","text":""},{"location":"reference/meringue/api/handlers/#meringue.api.handlers.exception_handler","title":"exception_handler","text":"<pre><code>exception_handler(exc, context)\n</code></pre> <p>Error handler returning message and error code pairs.</p> <p>The handler is a wrapper over the standard handler <code>rest_framework.views.exception_handler</code>.</p> Source code in <code>meringue/api/handlers.py</code> <pre><code>def exception_handler(exc, context):\n\"\"\"\n    Error handler returning message and error code pairs.\n    The handler is a wrapper over the standard handler `rest_framework.views.exception_handler`.\n    \"\"\"\nresponse = views.exception_handler(exc, context)\nif response is None:\nreturn response\nif isinstance(exc, exceptions.APIException):\nif isinstance(exc.detail, list):\nresponse.data = [render_error_details(e) for e in exc.detail]\nelif isinstance(exc.detail, dict):\nresponse.data = {f: render_error_details(e) for f, e in exc.detail.items()}\nreturn response\n</code></pre>"},{"location":"reference/meringue/api/routers/","title":"routers.py","text":""},{"location":"reference/meringue/api/routers/#meringue.api.routers","title":"meringue.api.routers","text":""},{"location":"reference/meringue/api/routers/#meringue.api.routers.ObjectRoute","title":"ObjectRoute  <code>module-attribute</code>","text":"<pre><code>ObjectRoute = namedtuple(\n\"ObjectRoute\",\n[\"url\", \"mapping\", \"name\", \"detail\", \"initkwargs\"],\n)\n</code></pre> <p>Object predefined detail route.</p>"},{"location":"reference/meringue/api/routers/#meringue.api.routers.MeringueRouter","title":"MeringueRouter","text":"<p>             Bases: <code>DefaultRouter</code></p> <p>The default router is inherited from the original default router but with some modifications.</p>"},{"location":"reference/meringue/api/routers/#meringue.api.routers.MeringueRouter.get_api_root_view","title":"get_api_root_view","text":"<pre><code>get_api_root_view(api_urls = None)\n</code></pre> <p>Return a basic root view.</p> Source code in <code>meringue/api/routers.py</code> <pre><code>def get_api_root_view(self, api_urls=None):\n\"\"\"\n    Return a basic root view.\n    \"\"\"\napi_root_dict = OrderedDict()\nobject_name = self.routes[0].name\nlist_name = self.routes[1].name\nfor prefix, viewset, basename in self.registry:\nif getattr(viewset, \"m_object_detail\", False):\napi_root_dict[prefix] = object_name.format(basename=basename)\nelse:\napi_root_dict[prefix] = list_name.format(basename=basename)\nreturn self.APIRootView.as_view(api_root_dict=api_root_dict)\n</code></pre>"},{"location":"reference/meringue/api/routers/#meringue.api.routers.MeringueRouter.get_routes","title":"get_routes","text":"<pre><code>get_routes(viewset)\n</code></pre> <p>Extra routes are filtered according to the new route type.</p> Source code in <code>meringue/api/routers.py</code> <pre><code>def get_routes(self, viewset):\n\"\"\"\n    Extra routes are filtered according to the new route type.\n    \"\"\"\ntmp_routes = super().get_routes(viewset)\nis_object_viewset = getattr(viewset, \"m_object_detail\", False)\nroutes = []\nfor route in tmp_routes:\nis_object_route = isinstance(route, ObjectRoute)\nif is_object_viewset:\nis_list_view = route.name == \"{basename}-list\"\nis_detail_view = route.name == \"{basename}-detail\"\nif is_list_view or is_detail_view:\n# ignore default list and detail routes\ncontinue\nroutes.append(route)\nelif not is_object_route:\nroutes.append(route)\nreturn routes\n</code></pre>"},{"location":"reference/meringue/api/utils/","title":"utils.py","text":""},{"location":"reference/meringue/api/utils/#meringue.api.utils","title":"meringue.api.utils","text":""},{"location":"reference/meringue/api/utils/#meringue.api.utils.render_error_details","title":"render_error_details","text":"<pre><code>render_error_details(\nerror_detail: list | dict | ErrorDetail,\n) -&gt; list | dict\n</code></pre> <p>The method renders errors of the ErrorDetail format into message and code pairs.</p> <p>Attributes:</p> <ul> <li> error_detail         \u2013          <p>Errors.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>Exception</code>           \u2013          <p>Unknown error type.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list | dict</code>         \u2013          <p>Rendered errors.</p> </li> </ul> Source code in <code>meringue/api/utils.py</code> <pre><code>def render_error_details(error_detail: list | dict | ErrorDetail) -&gt; list | dict:\n\"\"\"\n    The method renders errors of the ErrorDetail format into message and code pairs.\n    Attributes:\n        error_detail: Errors.\n    Raises:\n        Exception: Unknown error type.\n    Returns:\n        Rendered errors.\n    \"\"\"\nif isinstance(error_detail, list):\nerror_list = [render_error_details(e) for e in error_detail]\nreturn error_list\nelif isinstance(error_detail, ErrorDetail):\nreturn {\n\"message\": str(error_detail),\n\"code\": error_detail.code,\n}\nelif isinstance(error_detail, dict):\nerror_dict = {f: render_error_details(e) for f, e in error_detail.items()}\nreturn error_dict\nmsg = f\"Unknown error type {error_detail.__class__}: `{error_detail}`\"\nraise Exception(msg)\n</code></pre>"},{"location":"reference/meringue/api/docs/__init__/","title":"__init__.py","text":""},{"location":"reference/meringue/api/docs/__init__/#meringue.api.docs","title":"meringue.api.docs","text":""},{"location":"reference/meringue/api/docs/patchers/","title":"patchers.py","text":""},{"location":"reference/meringue/api/docs/patchers/#meringue.api.docs.patchers","title":"meringue.api.docs.patchers","text":""},{"location":"reference/meringue/api/docs/patchers/#meringue.api.docs.patchers.OpenAPISchemaPatcher","title":"OpenAPISchemaPatcher","text":"<pre><code>OpenAPISchemaPatcher()\n</code></pre> <p>OpenApi3 patcher.</p> <p>https://swagger.io/specification/</p> <p>Info</p> <p><code>json.loads</code> -&gt; <code>json.dumps</code> - for render locale <code>__proxy__</code> (e.g. <code>gettext_lazy</code>)</p> Source code in <code>meringue/api/docs/patchers.py</code> <pre><code>def __init__(self):\nself._security_schemes = {}\nself._components_schemes = {}\nself._tags_schemes = {}\n</code></pre>"},{"location":"reference/meringue/api/docs/patchers/#meringue.api.docs.patchers.OpenAPISchemaPatcher.register_security_scheme","title":"register_security_scheme","text":"<pre><code>register_security_scheme(name: str, scheme: dict)\n</code></pre> <p>Register security scheme.</p> <p>Attributes:</p> <ul> <li> name         \u2013          <p>Security scheme name.</p> </li> <li> scheme         \u2013          <p>Security scheme in Security Scheme Object or Reference Object format.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>Exception</code>           \u2013          <p>Security scheme already registered.</p> </li> </ul> Source code in <code>meringue/api/docs/patchers.py</code> <pre><code>def register_security_scheme(self, name: str, scheme: dict):\n\"\"\"\n    Register security scheme.\n    Attributes:\n        name: Security scheme name.\n        scheme: Security scheme in [Security Scheme Object](https://swagger.io/specification/#s\n            ecurity-scheme-object) or [Reference Object format](https://swagger.io/specificatio\n            n/#reference-object).\n    Raises:\n        Exception: Security scheme already registered.\n    \"\"\"\nif name in self._security_schemes:\nmsg = f\"Security scheme named `{name}` is already registered\"\nraise Exception(msg)\nself._security_schemes[name] = scheme\n</code></pre>"},{"location":"reference/meringue/api/docs/patchers/#meringue.api.docs.patchers.OpenAPISchemaPatcher.register_component_scheme","title":"register_component_scheme","text":"<pre><code>register_component_scheme(name: str, scheme: dict)\n</code></pre> <p>Register components scheme.</p> <p>Attributes:</p> <ul> <li> name         \u2013          <p>Component name.</p> </li> <li> schema         \u2013          <p>Formatted Component schema object.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>Exception</code>           \u2013          <p>Scheme is already registered.</p> </li> </ul> Source code in <code>meringue/api/docs/patchers.py</code> <pre><code>def register_component_scheme(self, name: str, scheme: dict):\n\"\"\"\n    Register components scheme.\n    Attributes:\n        name: Component name.\n        schema: [Formatted](https://swagger.io/specification/#schema-object) Component schema\n            object.\n    Raises:\n        Exception: Scheme is already registered.\n    \"\"\"\nif name in self._components_schemes:\nmsg = f\"Component named `{name}` is already registered\"\nraise Exception(msg)\nself._components_schemes[name] = scheme\n</code></pre>"},{"location":"reference/meringue/api/docs/patchers/#meringue.api.docs.patchers.OpenAPISchemaPatcher.register_tag","title":"register_tag","text":"<pre><code>register_tag(scheme: dict)\n</code></pre> <p>Register tag.</p> <p>Attributes:</p> <ul> <li> scheme         \u2013          <p>Tag scheme object.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>Exception</code>           \u2013          <p>Tag is already registered.</p> </li> </ul> Source code in <code>meringue/api/docs/patchers.py</code> <pre><code>def register_tag(self, scheme: dict):\n\"\"\"\n    Register tag.\n    Attributes:\n        scheme: [Tag scheme object](https://swagger.io/specification/#tag-object).\n    Raises:\n        Exception: Tag is already registered.\n    \"\"\"\nname = scheme[\"name\"]\nif name in self._tags_schemes:\nmsg = f\"A tag named `{name}` is already registered\"\nraise Exception(msg)\nself._tags_schemes[name] = scheme\n</code></pre>"},{"location":"reference/meringue/api/docs/patchers/#meringue.api.docs.patchers.OpenAPISchemaPatcher.patch_description","title":"patch_description","text":"<pre><code>patch_description(openapi_schema: dict)\n</code></pre> <p>Adds a list of servers from the openapi schema source servers to the description.</p> <p>This method adds to the end of the description a list of servers that it takes from the corresponding section of the openapi schema.</p> <p>Attributes:</p> <ul> <li> openapi_schema         \u2013          <p>OpenAPI Object.</p> </li> </ul> Source code in <code>meringue/api/docs/patchers.py</code> <pre><code>def patch_description(self, openapi_schema: dict):\n\"\"\"\n    Adds a list of servers from the openapi schema source servers to the description.\n    This method adds to the end of the description a list of servers that it takes from the\n    [corresponding section](https://swagger.io/specification/#server-object) of the openapi\n    schema.\n    Attributes:\n        openapi_schema: OpenAPI Object.\n    \"\"\"\nif not openapi_schema.get(\"servers\", []):\nreturn\nopenapi_schema.setdefault(\"info\", {})\nopenapi_schema[\"info\"].setdefault(\"description\", \"\")\nfor server in openapi_schema[\"servers\"]:\nname = server[\"description\"]\nfull_url = server[\"url\"]\nclear_url = full_url.split(\"://\")[1] if \"://\" in full_url else full_url\nif openapi_schema[\"info\"][\"description\"]:\nopenapi_schema[\"info\"][\"description\"] += \"\\n\\n\"\nopenapi_schema[\"info\"][\"description\"] += f\"{name} API: [{clear_url}]({full_url})\"\n</code></pre>"},{"location":"reference/meringue/api/docs/patchers/#meringue.api.docs.patchers.OpenAPISchemaPatcher.patch_security_schemes","title":"patch_security_schemes","text":"<pre><code>patch_security_schemes(openapi_schema: dict)\n</code></pre> <p>Adds registered security schemes to the openapi schema.</p> <p>Attributes:</p> <ul> <li> openapi_schema         \u2013          <p>OpenAPI Object.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>Exception</code>           \u2013          <p>Security scheme already registered.</p> </li> </ul> Source code in <code>meringue/api/docs/patchers.py</code> <pre><code>def patch_security_schemes(self, openapi_schema: dict):\n\"\"\"\n    Adds registered security schemes to the openapi schema.\n    Attributes:\n        openapi_schema: OpenAPI Object.\n    Raises:\n        Exception: Security scheme already registered.\n    \"\"\"\nif not self._security_schemes:\nreturn\nopenapi_schema.setdefault(\"components\", {})\nopenapi_schema[\"components\"].setdefault(\"securitySchemes\", {})\ntmp_schemes = json.loads(json.dumps(self._security_schemes, cls=DjangoJSONEncoder))\nfor name, schema in tmp_schemes.items():\nif name in openapi_schema[\"components\"][\"securitySchemes\"]:\nmsg = f\"Security scheme named `{name}` exists in the original schema\"\nraise Exception(msg)\nopenapi_schema[\"components\"][\"securitySchemes\"][name] = schema\n</code></pre>"},{"location":"reference/meringue/api/docs/patchers/#meringue.api.docs.patchers.OpenAPISchemaPatcher.patch_component_schemes","title":"patch_component_schemes","text":"<pre><code>patch_component_schemes(openapi_schema: dict)\n</code></pre> <p>Adds registered components schemas to the openapi schema.</p> <p>Attributes:</p> <ul> <li> openapi_schema         \u2013          <p>OpenAPI Object.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>Exception</code>           \u2013          <p>Component schema is already registered.</p> </li> </ul> Source code in <code>meringue/api/docs/patchers.py</code> <pre><code>def patch_component_schemes(self, openapi_schema: dict):\n\"\"\"\n    Adds registered components schemas to the openapi schema.\n    Attributes:\n        openapi_schema: OpenAPI Object.\n    Raises:\n        Exception: Component schema is already registered.\n    \"\"\"\nif not self._components_schemes:\nreturn\nopenapi_schema.setdefault(\"components\", {})\nopenapi_schema[\"components\"].setdefault(\"schemas\", {})\ntmp_components = json.loads(json.dumps(self._components_schemes, cls=DjangoJSONEncoder))\nfor name, schema in tmp_components.items():\nif name in openapi_schema[\"components\"][\"schemas\"]:\nmsg = f\"Component named `{name}` exists in the original schema\"\nraise Exception(msg)\nopenapi_schema[\"components\"][\"schemas\"][name] = schema\n</code></pre>"},{"location":"reference/meringue/api/docs/patchers/#meringue.api.docs.patchers.OpenAPISchemaPatcher.patch_tags","title":"patch_tags","text":"<pre><code>patch_tags(openapi_schema: dict)\n</code></pre> <p>Adds registered components schemas to the openapi schema.</p> <p>Attributes:</p> <ul> <li> openapi_schema         \u2013          <p>OpenAPI Object.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>Exception</code>           \u2013          <p>A tag exists in the original schema.</p> </li> </ul> Source code in <code>meringue/api/docs/patchers.py</code> <pre><code>def patch_tags(self, openapi_schema: dict):\n\"\"\"\n    Adds registered components schemas to the openapi schema.\n    Attributes:\n        openapi_schema: OpenAPI Object.\n    Raises:\n        Exception: A tag exists in the original schema.\n    \"\"\"\nif not self._tags_schemes:\nreturn\nopenapi_schema.setdefault(\"tags\", [])\nexists_tags_schemes = (t[\"name\"] for t in openapi_schema[\"tags\"])\ntmp_tags = json.loads(json.dumps(self._tags_schemes, cls=DjangoJSONEncoder))\nfor name, schema in tmp_tags.items():\nif name in exists_tags_schemes:\nmsg = f\"A tag named `{name}` exists in the original schema\"\nraise Exception(msg)\nopenapi_schema[\"tags\"].append(schema)\n</code></pre>"},{"location":"reference/meringue/api/docs/patchers/#meringue.api.docs.patchers.OpenAPISchemaPatcher.patch_schema","title":"patch_schema","text":"<pre><code>patch_schema(openapi_schema: dict)\n</code></pre> <p>Fully patch the schema.</p> Source code in <code>meringue/api/docs/patchers.py</code> <pre><code>def patch_schema(self, openapi_schema: dict):\n\"\"\"\n    Fully patch the schema.\n    \"\"\"\nself.patch_description(openapi_schema)\nself.patch_security_schemes(openapi_schema)\nself.patch_component_schemes(openapi_schema)\nself.patch_tags(openapi_schema)\n</code></pre>"},{"location":"reference/meringue/api/docs/views/","title":"views.py","text":""},{"location":"reference/meringue/api/docs/views/#meringue.api.docs.views","title":"meringue.api.docs.views","text":""},{"location":"reference/meringue/api/docs/views/#meringue.api.docs.views.MeringueSpectacularAPIView","title":"MeringueSpectacularAPIView","text":"<p>             Bases: <code>SpectacularAPIView</code></p> <p>Spectacular wrapper that patches the schema.</p>"},{"location":"reference/meringue/api/docs/views/#meringue.api.docs.views.MeringueSpectacularAPIView.patch_schema","title":"patch_schema","text":"<pre><code>patch_schema(openapi_schema: dict)\n</code></pre> <p>Method patching OpenAPI3 object.</p> <p>Attributes:</p> <ul> <li> openapi_schema         \u2013          <p>OpenAPI Object.</p> </li> </ul> Source code in <code>meringue/api/docs/views.py</code> <pre><code>def patch_schema(self, openapi_schema: dict):\n\"\"\"\n    Method patching OpenAPI3 object.\n    Attributes:\n        openapi_schema: OpenAPI Object.\n    \"\"\"\nif self.patcher:\nself.patcher.patch_schema(openapi_schema)\n</code></pre>"},{"location":"reference/meringue/conf/__init__/","title":"__init__.py","text":""},{"location":"reference/meringue/conf/__init__/#meringue.conf","title":"meringue.conf","text":""},{"location":"reference/meringue/conf/__init__/#meringue.conf.SETTING_KEY","title":"SETTING_KEY  <code>module-attribute</code>","text":"<pre><code>SETTING_KEY: Final[str] = 'MERINGUE'\n</code></pre> <p>Parameter name in django settings for meringue settings.</p> <p>Examples:</p> settings.py<pre><code>MERINGUE = {\n\"FRONTEND_URL\": \"http://meringue.local:9000/\",\n}\n</code></pre>"},{"location":"reference/meringue/conf/__init__/#meringue.conf.DEPRECATED_PARAMS","title":"DEPRECATED_PARAMS  <code>module-attribute</code>","text":"<pre><code>DEPRECATED_PARAMS: Final[dict[str, str]] = {}\n</code></pre> <p>Dict with deprecated options and warning texts for them.</p> <p>Examples:</p> <pre><code>DEPRECATED_PARAMS = {\n\"PROTOCOL\": \"The `PROTOCOL` option is deprecated, use `BACKEND_PROTOCOL` instead.\",\n}\n</code></pre>"},{"location":"reference/meringue/conf/__init__/#meringue.conf.PARAMS_TO_IMPORT","title":"PARAMS_TO_IMPORT  <code>module-attribute</code>","text":"<pre><code>PARAMS_TO_IMPORT: Final[list[str]] = [\n\"UPLOAD_RENAME_HANDLER\"\n]\n</code></pre> <p>List of options that contain the path to the module and must be imported.</p> <p>Examples:</p> <pre><code>PARAMS_TO_IMPORT = [\n\"UPLOAD_RENAME_HANDLER\",\n]\n</code></pre>"},{"location":"reference/meringue/conf/__init__/#meringue.conf.Settings","title":"Settings","text":"<pre><code>Settings(\nsetting_key: str,\ndefaults: dict[str, str],\ndeprecated_params: dict[str, str] | None = None,\nparams_to_impoprt: list[str] | None = None,\n)\n</code></pre> <p>A settings object.</p> <p>The settings are obtained from the django settings by the name of the key which should contain an object with all the application settings.</p> <p>Attributes:</p> <ul> <li> setting_key         \u2013          <p>Settings key in django settings list.</p> </li> <li> defaults         \u2013          <p>Dict with default parameter values. Used as a list of available settings.</p> </li> <li> deprecated_params         \u2013          <p>Dict with deprecated options and warning texts for them.</p> </li> <li> params_to_impoprt         \u2013          <p>List of options that contain the path to the module and must be imported.</p> </li> </ul> Source code in <code>meringue/conf/__init__.py</code> <pre><code>def __init__(\nself,\nsetting_key: str,\ndefaults: dict[str, str],\ndeprecated_params: dict[str, str] | None = None,\nparams_to_impoprt: list[str] | None = None,\n):\n\"\"\"\n    Attributes:\n        setting_key: Settings key in django settings list.\n        defaults: Dict with default parameter values. Used as a list of available settings.\n        deprecated_params: Dict with deprecated options and warning texts for them.\n        params_to_impoprt: List of options that contain the path to the module and must be\n            imported.\n    \"\"\"\nself.setting_key = setting_key\nif isinstance(defaults, ModuleType):\nself.defaults = {}\nfor key in dir(defaults):\nif key.isupper():\nself.defaults[key] = getattr(defaults, key)\nelse:\nself.defaults = defaults\nself.deprecated_params = deprecated_params or {}\nself.params_to_impoprt = params_to_impoprt or []\nself._cached_attrs = set()\nself.reset()\n</code></pre>"},{"location":"reference/meringue/conf/__init__/#meringue.conf.Settings.__getattr__","title":"__getattr__","text":"<pre><code>__getattr__(attr: str) -&gt; Any\n</code></pre> <p>Gets the parameter value and caches it in the attributes of the settings object.</p> <p>Attributes:</p> <ul> <li> attr         \u2013          <p>Setting parameter name.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>AttributeError</code>           \u2013          <p>Error when trying to get an unregistered parameter.</p> </li> </ul> <p>Warns:</p> <ul> <li> <code>DeprecationWarning</code>           \u2013          <p>A warning that the parameter is deprecated.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>         \u2013          <p>Setting value.</p> </li> </ul> Source code in <code>meringue/conf/__init__.py</code> <pre><code>def __getattr__(self, attr: str) -&gt; Any:\n\"\"\"\n    Gets the parameter value and caches it in the attributes of the settings object.\n    Attributes:\n        attr: Setting parameter name.\n    Raises:\n        AttributeError: Error when trying to get an unregistered parameter.\n    Warns:\n        DeprecationWarning: A warning that the parameter is deprecated.\n    Returns:\n        Setting value.\n    \"\"\"\nif attr not in self.defaults:\nraise AttributeError(\"Invalid setting key: '%s'\" % attr)\nif attr in self.deprecated_params:\nwarnings.warn(self.deprecated_params[attr], DeprecationWarning, stacklevel=2)\nval = self.user_params.get(attr, self.defaults[attr])\nif attr in self.params_to_impoprt:\nval = import_from_string(val, attr)\nself._cached_attrs.add(attr)\nsetattr(self, attr, val)\nreturn val\n</code></pre>"},{"location":"reference/meringue/conf/__init__/#meringue.conf.Settings.reset","title":"reset","text":"<pre><code>reset()\n</code></pre> <p>Reset downloaded settings, as well as clearing the cache.</p> Source code in <code>meringue/conf/__init__.py</code> <pre><code>def reset(self):\n\"\"\"\n    Reset downloaded settings, as well as clearing the cache.\n    \"\"\"\nfor attr in self._cached_attrs:\ndelattr(self, attr)\nself._cached_attrs = set()\nself.user_params = getattr(settings, self.setting_key, {})\n</code></pre>"},{"location":"reference/meringue/conf/__init__/#meringue.conf.import_from_string","title":"import_from_string","text":"<pre><code>import_from_string(val: str, attr: str) -&gt; Any\n</code></pre> <p>Imports a dotted module path and returns the attribute/class.</p> <p>Attributes:</p> <ul> <li> val         \u2013          <p>Dotted path to imported module.</p> </li> <li> attr         \u2013          <p>The name of the parameter in the library settings.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ImportError</code>           \u2013          <p>Attribute/class not exists.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>         \u2013          <p>Imported attribute/class.</p> </li> </ul> Source code in <code>meringue/conf/__init__.py</code> <pre><code>def import_from_string(val: str, attr: str) -&gt; Any:\n\"\"\"\n    Imports a dotted module path and returns the attribute/class.\n    Attributes:\n        val: Dotted path to imported module.\n        attr: The name of the parameter in the library settings.\n    Raises:\n        ImportError: Attribute/class not exists.\n    Returns:\n        Imported attribute/class.\n    \"\"\"\ntry:\nreturn import_string(val)\nexcept ImportError as e:\nmsg = f\"Could not import '{val}' for API setting '{attr}'.\\n{e.__class__.__name__}: {e}.\"\nraise ImportError(msg) from None\n</code></pre>"},{"location":"reference/meringue/conf/__init__/#meringue.conf.reset_settings","title":"reset_settings","text":"<pre><code>reset_settings(*args, **kwargs)\n</code></pre> <p>Settings change signal handler.</p> Source code in <code>meringue/conf/__init__.py</code> <pre><code>@receiver(setting_changed)\ndef reset_settings(*args, **kwargs):\n\"\"\"\n    Settings change signal handler.\n    \"\"\"\nif kwargs[\"setting\"] == SETTING_KEY:\nm_settings.reset()\n</code></pre>"},{"location":"reference/meringue/conf/default_settings/","title":"default_settings.py","text":""},{"location":"reference/meringue/conf/default_settings/#meringue.conf.default_settings","title":"meringue.conf.default_settings","text":""},{"location":"reference/meringue/conf/default_settings/#meringue.conf.default_settings.UPLOAD_RENAME_HANDLER","title":"UPLOAD_RENAME_HANDLER  <code>module-attribute</code>","text":"<pre><code>UPLOAD_RENAME_HANDLER: Final[\nstr\n] = \"meringue.core.upload_handlers.rename_handler\"\n</code></pre> <p>Path to method for renaming images on upload</p>"},{"location":"reference/meringue/conf/default_settings/#meringue.conf.default_settings.COP_YEAR","title":"COP_YEAR  <code>module-attribute</code>","text":"<pre><code>COP_YEAR: Final[int] = None\n</code></pre> <p>Project start year for the copyright tag</p>"},{"location":"reference/meringue/conf/default_settings/#meringue.conf.default_settings.COP_YEARS_DIFF","title":"COP_YEARS_DIFF  <code>module-attribute</code>","text":"<pre><code>COP_YEARS_DIFF: Final[int] = 10\n</code></pre> <p>Difference in years for which it is necessary to display the range of years</p> <p>Specify 1 to display the period for the second year.</p>"},{"location":"reference/meringue/conf/default_settings/#meringue.conf.default_settings.CRYPTO_KEY","title":"CRYPTO_KEY  <code>module-attribute</code>","text":"<pre><code>CRYPTO_KEY: Final[str] = settings.SECRET_KEY[:32]\n</code></pre> <p>Encryption key</p>"},{"location":"reference/meringue/conf/default_settings/#meringue.conf.default_settings.FRONTEND_URLS","title":"FRONTEND_URLS  <code>module-attribute</code>","text":"<pre><code>FRONTEND_URLS: Final[dict] = None\n</code></pre> <p>A dict of links to the frontend</p>"},{"location":"reference/meringue/conf/default_settings/#meringue.conf.default_settings.FRONTEND_DOMAIN","title":"FRONTEND_DOMAIN  <code>module-attribute</code>","text":"<pre><code>FRONTEND_DOMAIN: Final[str] = None\n</code></pre> <p>Domain for generating absolute links</p>"},{"location":"reference/meringue/conf/default_settings/#meringue.conf.default_settings.API_ENABLE_ROOT_VIEW","title":"API_ENABLE_ROOT_VIEW  <code>module-attribute</code>","text":"<pre><code>API_ENABLE_ROOT_VIEW: Final[str] = settings.DEBUG\n</code></pre> <p>Option to enable or disable the root view of the Router</p>"},{"location":"reference/meringue/core/__init__/","title":"__init__.py","text":""},{"location":"reference/meringue/core/__init__/#meringue.core","title":"meringue.core","text":""},{"location":"reference/meringue/core/apps/","title":"apps.py","text":""},{"location":"reference/meringue/core/apps/#meringue.core.apps","title":"meringue.core.apps","text":""},{"location":"reference/meringue/core/models/","title":"models.py","text":""},{"location":"reference/meringue/core/models/#meringue.core.models","title":"meringue.core.models","text":""},{"location":"reference/meringue/core/models/#meringue.core.models.CMTimeMixin","title":"CMTimeMixin","text":"<p>             Bases: <code>models.Model</code></p> <p>A simple mixin to add ctime and mtime fields.</p>"},{"location":"reference/meringue/core/models/#meringue.core.models.SortingMixin","title":"SortingMixin","text":"<p>             Bases: <code>models.Model</code></p> <p>Simple mixin to add sorting field.</p>"},{"location":"reference/meringue/core/models/#meringue.core.models.PublicationMixin","title":"PublicationMixin","text":"<p>             Bases: <code>models.Model</code></p> <p>Mixin with the functionality of manual publishing.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; FooModel.object.published()\n&gt;&gt;&gt; FooModel.object.unpublished()\n</code></pre>"},{"location":"reference/meringue/core/models/#meringue.core.models.PublicationDatesMixin","title":"PublicationDatesMixin","text":"<p>             Bases: <code>models.Model</code></p> <p>Mixin with the functionality of publishing in a certain period.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; FooModel.object.published()\n&gt;&gt;&gt; FooModel.object.unpublished()\n</code></pre>"},{"location":"reference/meringue/core/options/","title":"options.py","text":""},{"location":"reference/meringue/core/options/#meringue.core.options","title":"meringue.core.options","text":""},{"location":"reference/meringue/core/query/","title":"query.py","text":""},{"location":"reference/meringue/core/query/#meringue.core.query","title":"meringue.core.query","text":""},{"location":"reference/meringue/core/query/#meringue.core.query.SortingQuerySet","title":"SortingQuerySet","text":"<p>             Bases: <code>QuerySet</code></p> <p>QuerySet with methods for working with sorted positions</p>"},{"location":"reference/meringue/core/query/#meringue.core.query.SortingQuerySet.correction_sorting","title":"correction_sorting","text":"<pre><code>correction_sorting()\n</code></pre> <p>This is a method to update/fix the sorting of the selected list of items.</p> <p>The sorting will be done according to the <code>queryset</code> sorting, so sorting can be controlled by executing <code>.order_by()</code> before calling the <code>correction_sorting</code> method.</p> <p>The selection for updating sorting can be pre-limited by filtering the list.</p> Source code in <code>meringue/core/query.py</code> <pre><code>def correction_sorting(self):\n\"\"\"\n    This is a method to update/fix the sorting of the selected list of items.\n    The sorting will be done according to the `queryset` sorting, so sorting can be controlled\n    by executing `.order_by()` before calling the `correction_sorting` method.\n    The selection for updating sorting can be pre-limited by filtering the list.\n    \"\"\"\nitems = []\nsorting = 0\nfor item in self:\nif item.sorting != sorting:\nitem.sorting = sorting\nitems.append(item)\nsorting += 1\nreturn self.bulk_update(items, [\"sorting\"])\n</code></pre>"},{"location":"reference/meringue/core/query/#meringue.core.query.PublicationQuerySet","title":"PublicationQuerySet","text":"<p>             Bases: <code>QuerySet</code></p> <p>QuerySet with methods for fetching published and unpublished elements.</p>"},{"location":"reference/meringue/core/query/#meringue.core.query.PublicationQuerySet.published","title":"published","text":"<pre><code>published(*args, **kwargs)\n</code></pre> <p>Method to getting published items.</p> Source code in <code>meringue/core/query.py</code> <pre><code>def published(self, *args, **kwargs):\n\"\"\"\n    Method to getting published items.\n    \"\"\"\nfrom meringue.core.models import PublicationDatesMixin\nfrom meringue.core.models import PublicationMixin\nif issubclass(self.model, PublicationMixin):\nkwargs[\"is_published\"] = True\nif issubclass(self.model, PublicationDatesMixin):\nnow = timezone.now()\nargs = (\n*args,\nQ(date_from__lte=now, date_to__gt=now)\n| Q(date_from__isnull=True, date_to__gt=now)\n| Q(date_from__lte=now, date_to__isnull=True)\n| Q(date_from__isnull=True, date_to__isnull=True),\n)\nreturn self.filter(*args, **kwargs)\n</code></pre>"},{"location":"reference/meringue/core/query/#meringue.core.query.PublicationQuerySet.unpublished","title":"unpublished","text":"<pre><code>unpublished(*args, **kwargs)\n</code></pre> <p>Method for getting unpublished items.</p> Source code in <code>meringue/core/query.py</code> <pre><code>def unpublished(self, *args, **kwargs):\n\"\"\"\n    Method for getting unpublished items.\n    \"\"\"\nfrom meringue.core.models import PublicationDatesMixin\nfrom meringue.core.models import PublicationMixin\nif issubclass(self.model, PublicationMixin):\nkwargs[\"is_published\"] = False\nif issubclass(self.model, PublicationDatesMixin):\nnow = timezone.now()\nargs = (*args, Q(date_from__gt=now) | Q(date_to__lte=now))\nreturn self.filter(*args, **kwargs)\n</code></pre>"},{"location":"reference/meringue/core/query/#meringue.core.query.UniversalQuerySet","title":"UniversalQuerySet","text":"<p>             Bases: <code>SortingQuerySet</code>, <code>PublicationQuerySet</code></p> <p>Generic QuerySet containing methods of all other QuerySets</p>"},{"location":"reference/meringue/core/translation/","title":"translation.py","text":""},{"location":"reference/meringue/core/translation/#meringue.core.translation","title":"meringue.core.translation","text":""},{"location":"reference/meringue/core/upload_handlers/","title":"upload_handlers.py","text":""},{"location":"reference/meringue/core/upload_handlers/#meringue.core.upload_handlers","title":"meringue.core.upload_handlers","text":""},{"location":"reference/meringue/core/upload_handlers/#meringue.core.upload_handlers.MemoryFileUploadHandler","title":"MemoryFileUploadHandler","text":"<p>             Bases: <code>uploadhandler.MemoryFileUploadHandler</code></p> <p>File upload handler to stream uploads into memory (used for small files).</p> <p>Examples:</p> settings.py<pre><code>FILE_UPLOAD_HANDLERS = (\n'meringue.core.upload_handlers.MemoryFileUploadHandler',\n'django.core.files.uploadhandler.TemporaryFileUploadHandler',\n)\n</code></pre>"},{"location":"reference/meringue/core/upload_handlers/#meringue.core.upload_handlers.TemporaryFileUploadHandler","title":"TemporaryFileUploadHandler","text":"<p>             Bases: <code>uploadhandler.TemporaryFileUploadHandler</code></p> <p>Upload handler that streams data into a temporary file.</p> <p>Examples:</p> settings.py<pre><code>FILE_UPLOAD_HANDLERS = (\n'django.core.files.uploadhandler.MemoryFileUploadHandler',\n'meringue.core.upload_handlers.TemporaryFileUploadHandler',\n)\n</code></pre>"},{"location":"reference/meringue/core/upload_handlers/#meringue.core.upload_handlers.rename_handler","title":"rename_handler","text":"<pre><code>rename_handler(file_name: str) -&gt; str\n</code></pre> <p>Default method for renaming files when using load handlers MemoryFileUploadHandler and / or TemporaryFileUploadHandler.</p> <p>Attributes:</p> <ul> <li> file_name         \u2013          <p>Original file name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>New file name.</p> </li> </ul> Source code in <code>meringue/core/upload_handlers.py</code> <pre><code>def rename_handler(file_name: str) -&gt; str:\n\"\"\"\n    Default method for renaming files when using load handlers\n    [MemoryFileUploadHandler][meringue.core.upload_handlers.MemoryFileUploadHandler] and / or\n    [TemporaryFileUploadHandler][meringue.core.upload_handlers.TemporaryFileUploadHandler].\n    Attributes:\n        file_name: Original file name.\n    Returns:\n        New file name.\n    \"\"\"\nreturn str(Path(file_name).with_stem(str(uuid.uuid4())))\n</code></pre>"},{"location":"reference/meringue/core/views/","title":"views.py","text":""},{"location":"reference/meringue/core/views/#meringue.core.views","title":"meringue.core.views","text":""},{"location":"reference/meringue/core/views/#meringue.core.views.im_a_teapot","title":"im_a_teapot","text":"<pre><code>im_a_teapot(request)\n</code></pre> <p>We all at some point want to brew boiling water.</p> <p>Examples:</p> urls.py<pre><code>from django.urls import path\nfrom meringue.core.views import im_a_teapot\nurlpatterns = [\npath('make_coffee', im_a_teapot, name=\"make_coffee\"),\n]\n</code></pre> Source code in <code>meringue/core/views.py</code> <pre><code>def im_a_teapot(request):\n\"\"\"\n    We all at some point want to brew boiling water.\n    Examples:\n        ```py title=\"urls.py\"\n        from django.urls import path\n        from meringue.core.views import im_a_teapot\n        urlpatterns = [\n            path('make_coffee', im_a_teapot, name=\"make_coffee\"),\n        ]\n        ```\n    \"\"\"\nreturn HttpResponse(status=418)\n</code></pre>"},{"location":"reference/meringue/core/templatetags/__init__/","title":"__init__.py","text":""},{"location":"reference/meringue/core/templatetags/__init__/#meringue.core.templatetags","title":"meringue.core.templatetags","text":""},{"location":"reference/meringue/core/templatetags/meringue_base/","title":"meringue_base.py","text":""},{"location":"reference/meringue/core/templatetags/meringue_base/#meringue.core.templatetags.meringue_base","title":"meringue.core.templatetags.meringue_base","text":""},{"location":"reference/meringue/core/templatetags/meringue_base/#meringue.core.templatetags.meringue_base.cop_year","title":"cop_year","text":"<pre><code>cop_year() -&gt; str\n</code></pre> <p>A tag that displays the year or range of years for the copyright string in <code>YYYY-YYYY</code> format.</p> <p>Examples:</p> <pre><code>&lt;p&gt;Copyright \u00a9 {% cop_year %} My company&lt;/p&gt;\n</code></pre> <p>Raises:</p> <ul> <li> <code>Exception</code>           \u2013          <p>To use the <code>cop_year</code> tag, you must fill in the <code>COP_YEAR</code> parameter in the meringue settings</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>Year for copyrights.</p> </li> </ul> Source code in <code>meringue/core/templatetags/meringue_base.py</code> <pre><code>@register.simple_tag\ndef cop_year() -&gt; str:\n\"\"\"\n    A tag that displays the year or range of years for the copyright string in `YYYY-YYYY` format.\n    Examples:\n        ```jinja\n        &lt;p&gt;Copyright \u00a9 {% cop_year %} My company&lt;/p&gt;\n        ```\n    Raises:\n        Exception: To use the `cop_year` tag, you must fill in the `COP_YEAR` parameter in the\n            meringue settings\n    Returns:\n        Year for copyrights.\n    \"\"\"\nif m_settings.COP_YEAR is None:\nmsg = (\n\"To use the `cop_year` tag, you must fill in the `COP_YEAR` parameter in the \"\n\"meringue settings\"\n)\nraise Exception(msg)\nyear = timezone.localtime().year\nif year == m_settings.COP_YEAR or year - m_settings.COP_YEAR &lt; m_settings.COP_YEARS_DIFF:\nreturn year\nreturn mark_safe(f\"{m_settings.COP_YEAR}&amp;mdash;{year}\")  # noqa: S308\n</code></pre>"},{"location":"reference/meringue/core/templatetags/meringue_base/#meringue.core.templatetags.meringue_base.date_range","title":"date_range","text":"<pre><code>date_range(date_start: dt.date, date_end: dt.date) -&gt; str\n</code></pre> <p>Return range of date in one of the following formats:</p> <ul> <li><code>DD.MM.YYYY - DD.MM.YYYY</code></li> <li><code>DD.MM - DD.MM.YYYY</code></li> <li><code>DD - DD.MM.YYYY</code></li> <li><code>DD.MM.YYYY</code></li> </ul> <p>Attributes:</p> <ul> <li> date_start         \u2013          <p>Period start date.</p> </li> <li> date_end         \u2013          <p>Period end date.</p> </li> </ul> <p>Examples:</p> <pre><code>{% date_range date_start date_end %}\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>Date period.</p> </li> </ul> Source code in <code>meringue/core/templatetags/meringue_base.py</code> <pre><code>@register.simple_tag\ndef date_range(date_start: dt.date, date_end: dt.date) -&gt; str:\n\"\"\"\n    Return range of date in one of the following formats:\n    * `DD.MM.YYYY - DD.MM.YYYY`\n    * `DD.MM - DD.MM.YYYY`\n    * `DD - DD.MM.YYYY`\n    * `DD.MM.YYYY`\n    Attributes:\n        date_start: Period start date.\n        date_end: Period end date.\n    Examples:\n        ```jinja\n        {% date_range date_start date_end %}\n        ```\n    Returns:\n        Date period.\n    \"\"\"\ntmp_result = format_date_from_to(date_start, date_end, \"-\")\nif date_start == date_end:\nreturn tmp_result\ntmp_date_start, tmp_date_end = tmp_result.split(\" - \")\nreturn mark_safe(f\"{tmp_date_start}&amp;nbsp;&amp;mdash; {tmp_date_end}\")  # noqa: S308\n</code></pre>"},{"location":"reference/meringue/core/utils/__init__/","title":"__init__.py","text":""},{"location":"reference/meringue/core/utils/__init__/#meringue.core.utils","title":"meringue.core.utils","text":""},{"location":"reference/meringue/core/utils/crypt/","title":"crypt.py","text":""},{"location":"reference/meringue/core/utils/crypt/#meringue.core.utils.crypt","title":"meringue.core.utils.crypt","text":""},{"location":"reference/meringue/core/utils/crypt/#meringue.core.utils.crypt.encrypt_message","title":"encrypt_message","text":"<pre><code>encrypt_message(msg: str) -&gt; str\n</code></pre> <p>Method for encrypting a message with AES algorithm and the GCM method.</p> <p>Attributes:</p> <ul> <li> msg         \u2013          <p>Message to Encrypt.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>Encrypted message.</p> </li> </ul> Source code in <code>meringue/core/utils/crypt.py</code> <pre><code>def encrypt_message(msg: str) -&gt; str:\n\"\"\"\n    Method for encrypting a message with AES algorithm and the GCM method.\n    Attributes:\n        msg: Message to Encrypt.\n    Returns:\n        Encrypted message.\n    \"\"\"\ncipher = AES.new(m_settings.CRYPTO_KEY.encode(\"utf8\"), AES.MODE_GCM)\nencrypted_msg = cipher.encrypt(msg.encode(\"utf8\"))\nnonce = cipher.nonce\nresult = base64.urlsafe_b64encode(nonce + encrypted_msg).decode(\"utf-8\")\nreturn result\n</code></pre>"},{"location":"reference/meringue/core/utils/crypt/#meringue.core.utils.crypt.decrypt_message","title":"decrypt_message","text":"<pre><code>decrypt_message(msg: str) -&gt; str\n</code></pre> <p>Method for decrypting a message encrypted with AES algorithm and the GCM method.</p> <p>Attributes:</p> <ul> <li> msg         \u2013          <p>Message to decrypt.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>Decrypted message.</p> </li> </ul> Source code in <code>meringue/core/utils/crypt.py</code> <pre><code>def decrypt_message(msg: str) -&gt; str:\n\"\"\"\n    Method for decrypting a message encrypted with AES algorithm and the GCM method.\n    Attributes:\n        msg: Message to decrypt.\n    Returns:\n        Decrypted message.\n    \"\"\"\nraw_msg = base64.urlsafe_b64decode(msg.encode(\"utf-8\"))\nnonce, raw_msg = raw_msg[: AES.block_size], raw_msg[AES.block_size :]\ncipher = AES.new(m_settings.CRYPTO_KEY.encode(\"utf-8\"), AES.MODE_GCM, nonce=nonce)\ndecrypted_msg = cipher.decrypt(raw_msg).decode(\"utf-8\")\nreturn decrypted_msg\n</code></pre>"},{"location":"reference/meringue/core/utils/datetime/","title":"datetime.py","text":""},{"location":"reference/meringue/core/utils/datetime/#meringue.core.utils.datetime","title":"meringue.core.utils.datetime","text":""},{"location":"reference/meringue/core/utils/datetime/#meringue.core.utils.datetime.format_date_from_to","title":"format_date_from_to","text":"<pre><code>format_date_from_to(\ndate_start: dt.date,\ndate_end: dt.date,\ndelimiter: str = \"-\",\n) -&gt; str\n</code></pre> <p>Method to display date period.</p> <p>Possible output formats depending on the input data:</p> <ul> <li><code>DD.MM.YYYY - DD.MM.YYYY</code></li> <li><code>DD.MM - DD.MM.YYYY</code></li> <li><code>DD - DD.MM.YYYY</code></li> <li><code>DD.MM.YYYY</code></li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; print(format_date_from_to(dt.date(2020, 1, 1), dt.date(2020, 2, 1)))\n01.01 - 01.02.2020\n</code></pre> <p>Attributes:</p> <ul> <li> date_start         \u2013          <p>Period start date.</p> </li> <li> date_end         \u2013          <p>Period end date.</p> </li> <li> delimiter         \u2013          <p>Dates delimiter.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>Date period string.</p> </li> </ul> Source code in <code>meringue/core/utils/datetime.py</code> <pre><code>def format_date_from_to(\ndate_start: dt.date,\ndate_end: dt.date,\ndelimiter: str = \"-\",\n) -&gt; str:\n\"\"\"\n    Method to display date period.\n    Possible output formats depending on the input data:\n    * `DD.MM.YYYY - DD.MM.YYYY`\n    * `DD.MM - DD.MM.YYYY`\n    * `DD - DD.MM.YYYY`\n    * `DD.MM.YYYY`\n    Examples:\n        ```pycon\n        &gt;&gt;&gt; print(format_date_from_to(dt.date(2020, 1, 1), dt.date(2020, 2, 1)))\n        01.01 - 01.02.2020\n        ```\n    Attributes:\n        date_start: Period start date.\n        date_end: Period end date.\n        delimiter: Dates delimiter.\n    Returns:\n        Date period string.\n    \"\"\"\nif date_start.year != date_end.year:\nreturn f\"{date_start:%d.%m.%Y} {delimiter} {date_end:%d.%m.%Y}\"\nif date_start.month != date_end.month:\nreturn f\"{date_start:%d.%m} {delimiter} {date_end:%d.%m.%Y}\"\nif date_start.day != date_end.day:\nreturn f\"{date_start:%d} {delimiter} {date_end:%d.%m.%Y}\"\nreturn f\"{date_end:%d.%m.%Y}\"\n</code></pre>"},{"location":"reference/meringue/core/utils/frontend/","title":"frontend.py","text":""},{"location":"reference/meringue/core/utils/frontend/#meringue.core.utils.frontend","title":"meringue.core.utils.frontend","text":""},{"location":"reference/meringue/core/utils/frontend/#meringue.core.utils.frontend.get_link","title":"get_link","text":"<pre><code>get_link(\nurl_name: str,\nabsolute: bool | None = True,\n**kwargs: bool | None\n) -&gt; str\n</code></pre> <p>Method for getting a link.</p> <p>Attributes:</p> <ul> <li> url_name         \u2013          <p>The url name</p> </li> <li> absolute         \u2013          <p>Flag to make URL absolute or relative</p> </li> <li> kwargs         \u2013          <p>Url parameters</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>Exception</code>           \u2013          <p>FRONTEND_URLS parameter is empty</p> </li> <li> <code>Exception</code>           \u2013          <p>The passed link is not specified in the FRONTEND_URLS parameter</p> </li> <li> <code>Exception</code>           \u2013          <p>FRONTEND_DOMAIN parameter not specified</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>link to the front.</p> </li> </ul> Source code in <code>meringue/core/utils/frontend.py</code> <pre><code>def get_link(\nurl_name: str,\nabsolute: bool | None = True,\n**kwargs,\n) -&gt; str:\n\"\"\"\n    Method for getting a link.\n    Attributes:\n        url_name: The url name\n        absolute: Flag to make URL absolute or relative\n        kwargs: Url parameters\n    Raises:\n        Exception: FRONTEND_URLS parameter is empty\n        Exception: The passed link is not specified in the FRONTEND_URLS parameter\n        Exception: FRONTEND_DOMAIN parameter not specified\n    Returns:\n        link to the front.\n    \"\"\"\nif m_settings.FRONTEND_URLS is None:\nmsg = \"FRONTEND_URLS parameter is empty\"\nraise Exception(msg)\nif url_name not in m_settings.FRONTEND_URLS:\nmsg = f\"The passed link `{url_name}` is not specified in the FRONTEND_URLS parameter\"\nraise Exception(msg)\nurl = m_settings.FRONTEND_URLS[url_name]\nurl = url(**kwargs) if callable(url) else url.format(**kwargs)\nif absolute:\nif m_settings.FRONTEND_DOMAIN is None:\nmsg = \"FRONTEND_DOMAIN option not set\"\nraise Exception(msg)\nurl = urljoin(m_settings.FRONTEND_DOMAIN, url)\nreturn url\n</code></pre>"},{"location":"usage/","title":"Getting Started","text":""},{"location":"usage/#installation","title":"Installation","text":"<pre><code>$ pip install meringue\n</code></pre> <p>You can connect individual modules as needed (read more in the documentation of the corresponding module):</p> <pre><code>INSTALLED_APPS = (\n    ...\n    'meringue.core',\n    'meringue.api',\n    ...\n)\n</code></pre> <p>All settings for the library are specified inside the <code>MERINGUE</code> parameter (for more details, see the corresponding section):</p> <pre><code>MERINGUE = {\n    ...\n}\n</code></pre>"},{"location":"usage/api/","title":"Meringue Api","text":"<p>This is an application with a set of various utilities for the API and in particular for the Django Rest Framework.</p>"},{"location":"usage/api/#routers","title":"routers","text":""},{"location":"usage/api/#meringuerouter","title":"MeringueRouter","text":"<p>It's a django rest framework router, with some additional specific functionality.</p>"},{"location":"usage/api/#root-view","title":"Root view","text":"<p>The router enables and disables the root view according to the API_ENABLE_ROOT_VIEW setting. By default, the parameter corresponds to the value of the DEBUG parameter and in production the root view is disabled.</p>"},{"location":"usage/api/#object-predefined-detail-route","title":"Object predefined detail route","text":"<p>The router allows you to add ViewSet for predefined objects - that is, a ViewSet object for which it is known in advance, the simplest example is a profile. To manage a profile, it is often necessary to have a set of views - getting a profile, editing, deleting. The default behavior of DRF will either require you to use an id to request a profile, or make several separate views for this, this router allows you to use ViewSet for this. To implement such a ViewSet, you need to make a standard ViewSet and specify the flag <code>m_object_detail = True</code>.</p> <p>For example, ViewSet for a profile in general will look like this:</p> <pre><code>class ProfileViewSet(\nmixins.RetrieveModelMixin,\nmixins.DestroyModelMixin,\nGenericViewSet,\n):\npermission_classes = (ProfilePermission, )\nqueryset = User.objects.all()\nserializer_class = ProfileSerializer\nobject_detail = True\ndef get_object(self):\nuser = self.request.user\nself.check_object_permissions(self.request, user)\nreturn user\ndef perform_destroy(self, instance):\nself.request.user = AnonymousUser()\nsuper().perform_destroy(instance)\n</code></pre> <p>Of course, for such a router, it will not work to use <code>ListModelMixin</code>.</p> <p>The router itself in use is exactly the same as a regular one:</p> <pre><code>from meringue.api.routers import MeringueRouter\nrouter = MeringueRouter()\nrouter.register('profile', ProfileViewSet, basename=\"profile\")\nurlpatterns = [\npath('', include(router.urls)),\n]\n</code></pre>"},{"location":"usage/api/#handlers","title":"handlers","text":""},{"location":"usage/api/#exception_handler","title":"exception_handler","text":"<p>Error handler for django rest framework.</p> <p>This handler returns errors in the format of code and error message pairs, this can be useful when it is necessary to implement different behavior on the front depending on the type of error (for example, in a certain case, show a popup with extended information about the cause of the error).</p> settings.py<pre><code>REST_FRAMEWORK = {\n\"EXCEPTION_HANDLER\": \"meringue.api.handlers.exception_handler\",\n}\n</code></pre> <pre><code>&gt;&gt;&gt; from rest_framework import serializers\n&gt;&gt;&gt; from django.contrib.auth.models import User\n&gt;&gt;&gt; class UserSerializer(serializers.ModelSerializer):\n&gt;&gt;&gt;     class Meta:\n&gt;&gt;&gt;         model = User\n&gt;&gt;&gt;         fields = [\"username\",]\n&gt;&gt;&gt; serializer = UserSerializer(data={})\n&gt;&gt;&gt; serializer.is_valid()\n&gt;&gt;&gt; print(serializer.errors)\n{'username': [ErrorDetail(string='Required field.', code='required')]}\n</code></pre>"},{"location":"usage/api/#docs","title":"docs","text":"<p>When generating API documentation using drf-spectacular, it is possible to intervene in the resulting object in a limited and inconvenient way:</p> <ul> <li>Firstly, it is proposed to do all this in the settings, which no longer implies a large amount of data (or it will be terribly inconvenient);</li> <li>Secondly, it is difficult to do some manipulations \"on the fly\" (for example, depending on the environment, you may have a different set of authorization methods, or something else);</li> <li>Thirdly, if you have several apexes and, accordingly, documentation, you will not be able to do, for example, a different description for different apexes / documentation.</li> </ul> <p>To solve all these problems, we implemented a patcher and a view to load it.</p>"},{"location":"usage/api/#openapischemapatcher","title":"OpenAPISchemaPatcher","text":"<p>This is an OpenAPI3 schema patcher that makes it relatively easy to add data to the schema. Everything is quite simple and without much logic, just additional data is first registered, then the scheme is supplemented with them.</p> <p>To register additional objects, there is the following set of methods:</p>"},{"location":"usage/api/#register_security_scheme","title":"register_security_scheme","text":"<p>Register security scheme.</p> <p>Attributes:</p> <ul> <li> name         \u2013          <p>Security scheme name.</p> </li> <li> scheme         \u2013          <p>Security scheme in Security Scheme Object or Reference Object format.</p> </li> </ul> <p>Example:</p> <pre><code>from meringue.api.docs import OpenAPISchemaPatcher\npatcher = OpenAPISchemaPatcher()\npatcher.register_security_scheme(\"name\", { ... })\n</code></pre>"},{"location":"usage/api/#register_component_scheme","title":"register_component_scheme","text":"<p>Register components scheme.</p> <p>Attributes:</p> <ul> <li> name         \u2013          <p>Component name.</p> </li> <li> schema         \u2013          <p>Formatted Component schema object.</p> </li> </ul> <p>Example:</p> <pre><code>from meringue.api.docs import OpenAPISchemaPatcher\npatcher = OpenAPISchemaPatcher()\npatcher.register_component_scheme(\"name\", { ... })\n</code></pre>"},{"location":"usage/api/#register_tag","title":"register_tag","text":"<p>Register tag.</p> <p>Attributes:</p> <ul> <li> scheme         \u2013          <p>Tag scheme object.</p> </li> </ul> <p>Example:</p> <pre><code>from meringue.api.docs import OpenAPISchemaPatcher\npatcher = OpenAPISchemaPatcher()\npatcher.register_tag({\n\"name\": \"meringue\",\n\"x-displayName\": \"Meringue\",\n})\n</code></pre>"},{"location":"usage/api/#patch_description","title":"patch_description","text":"<p>Adds a list of servers from the openapi schema source servers to the description.</p> <p>This method adds to the end of the description a list of servers that it takes from the corresponding section of the openapi schema.</p> <p>Attributes:</p> <ul> <li> openapi_schema         \u2013          <p>OpenAPI Object.</p> </li> </ul> <p>Example:</p> <pre><code>&gt;&gt;&gt; from meringue.api.docs import OpenAPISchemaPatcher\n&gt;&gt;&gt; patcher = OpenAPISchemaPatcher()\n&gt;&gt;&gt; schema = {\n...     \"servers\": [\n...         {\n...             \"description\": \"Server 1\",\n...             \"url\": \"https://example-1.com\",\n...         },\n...         {\n...             \"description\": \"Server 2\",\n...             \"url\": \"example-2.com\",\n...         },\n...     ],\n...     \"info\": {\n...         \"description\": \"Test API\",\n...     },\n... }\n&gt;&gt;&gt; patcher.patch_description(schema)\n&gt;&gt;&gt; print(schema)\n{\n    \"servers\": [\n        {\n            \"description\": \"Server 1\",\n            \"url\": \"https://example-1.com\",\n        },\n        {\n            \"description\": \"Server 2\",\n            \"url\": \"example-2.com\",\n        },\n    ],\n    \"info\": {\n        \"description\": \"Test API\\n\\nServer 1 API [example-1.com](https://example-1.com)\\n\\nServer 2 API [example-2.com](example-2.com)\",\n    },\n}\n</code></pre>"},{"location":"usage/api/#patch_security_schemes","title":"patch_security_schemes","text":"<p>Adds registered security schemes to the openapi schema.</p> <p>Attributes:</p> <ul> <li> openapi_schema         \u2013          <p>OpenAPI Object.</p> </li> </ul> <p>Example:</p> <pre><code>&gt;&gt;&gt; from meringue.api.docs import OpenAPISchemaPatcher\n&gt;&gt;&gt; patcher = OpenAPISchemaPatcher()\n&gt;&gt;&gt; patcher.register_security_scheme(\"name\", { ... })\n&gt;&gt;&gt; schema = {}\n&gt;&gt;&gt; patcher.patch_security_schemes(schema)\n&gt;&gt;&gt; print(schema)\n{\n    \"components\": {\n        \"securitySchemes\": {\n            \"name\": { ... },\n        },\n    },\n}\n</code></pre>"},{"location":"usage/api/#patch_component_schemes","title":"patch_component_schemes","text":"<p>Adds registered components schemas to the openapi schema.</p> <p>Attributes:</p> <ul> <li> openapi_schema         \u2013          <p>OpenAPI Object.</p> </li> </ul> <p>Example:</p> <pre><code>&gt;&gt;&gt; from meringue.api.docs import OpenAPISchemaPatcher\n&gt;&gt;&gt; patcher = OpenAPISchemaPatcher()\n&gt;&gt;&gt; patcher.register_component_scheme(\"name\", { ... })\n&gt;&gt;&gt; schema = {}\n&gt;&gt;&gt; patcher.patch_component_schemes(schema)\n&gt;&gt;&gt; print(schema)\n{\n    \"components\": {\n        \"schemas\": {\n            \"name\": { ... },\n        },\n    },\n}\n</code></pre>"},{"location":"usage/api/#patch_tags","title":"patch_tags","text":"<p>Adds registered components schemas to the openapi schema.</p> <p>Attributes:</p> <ul> <li> openapi_schema         \u2013          <p>OpenAPI Object.</p> </li> </ul> <p>Example:</p> <pre><code>&gt;&gt;&gt; from meringue.api.docs import OpenAPISchemaPatcher\n&gt;&gt;&gt; schema = {\n...     \"servers\": [\n...         {\n...             \"description\": \"Server 1\",\n...             \"url\": \"https://example-1.com\",\n...         },\n...         {\n...             \"description\": \"Server 2\",\n...             \"url\": \"example-2.com\",\n...         },\n...     ],\n... }\n&gt;&gt;&gt; patcher = OpenAPISchemaPatcher()\n&gt;&gt;&gt; patcher.register_tag({\n...    \"name\": \"meringue\",\n...    \"x-displayName\": \"Meringue\",\n... })\n&gt;&gt;&gt; patcher.patch_tags(schema)\n&gt;&gt;&gt; print(schema)\n{\n    \"servers\": [\n        {\n            \"description\": \"Server 1\",\n            \"url\": \"https://example-1.com\",\n        },\n        {\n            \"description\": \"Server 2\",\n            \"url\": \"example-2.com\",\n        },\n    ],\n    \"tags\": [\n            {\n            \"name\": \"meringue\",\n            \"x-displayName\": \"Meringue\",\n        },\n    ],\n}\n</code></pre>"},{"location":"usage/api/#patch_schema","title":"patch_schema","text":"<p>Fully patch the schema.</p>"},{"location":"usage/api/#meringuespectacularapiview","title":"MeringueSpectacularAPIView","text":"<p>This view is a wrapper around the original SpectacularAPIView, but with the addition of a method that patches the OpenAPI schema.</p> urls.py<pre><code>from django.urls import path\nfrom meringue.api.docs import OpenAPISchemaPatcher\nfrom meringue.api.docs import MeringueSpectacularAPIView\npatcher = OpenAPISchemaPatcher()\npatcher.register_tag({\n\"name\": \"meringue\",\n\"x-displayName\": \"Meringue\",\n})\nurlpatterns = [\npath(\"schema\", MeringueSpectacularAPIView.as_view(patcher=patcher), name=\"schema\"),\n]\n</code></pre>"},{"location":"usage/conf/","title":"Configurations","text":"<p>All settings for Meringue are set inside the <code>MERINGUE</code> parameter of the django settings, and in the project settings it looks something like this:</p> settings.py<pre><code>MERINGUE = {\n'UPLOAD_RENAME_HANDLER': 'my_project.upload_handlers.rename_handler',\n}\n</code></pre> <p>Library settings can be accessed as follows:</p> <pre><code>&gt;&gt;&gt; from meringue.conf import m_settings\n&gt;&gt;&gt; print(m_settings.UPLOAD_RENAME_HANDLER)\nmy_project.upload_handlers.rename_handler\n</code></pre> <p>A complete and up-to-date list of parameters can be found here.</p>"},{"location":"usage/core/","title":"Meringue core","text":"<p>This is a basic package that contains a variety of general purpose functionality such as abstract models, various handlers, utilities, and more.</p>"},{"location":"usage/core/#mixins","title":"Mixins","text":""},{"location":"usage/core/#cmtimemixin","title":"CMTimeMixin","text":"<p>A primitive abstract model that adds the ctime and mtime fields to your model.</p>"},{"location":"usage/core/#sortingmixin","title":"SortingMixin","text":"<p>An abstract model that adds a sortable field, as well as a manager with sorting correction functionality.</p>"},{"location":"usage/core/#correction_sorting","title":"correction_sorting","text":"<p>This is a method to update/fix the sorting of the selected list of items.</p> <p>The sorting will be done according to the <code>queryset</code> sorting, so sorting can be controlled by executing <code>.order_by()</code> before calling the <code>correction_sorting</code> method.</p> <p>The selection for updating sorting can be pre-limited by filtering the list.</p>"},{"location":"usage/core/#publicationmixin","title":"PublicationMixin","text":"<p>Mixin with the functionality of manual publishing.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; FooModel.object.published()\n&gt;&gt;&gt; FooModel.object.unpublished()\n</code></pre>"},{"location":"usage/core/#published","title":"published","text":"<p>Method to getting published items.</p>"},{"location":"usage/core/#unpublished","title":"unpublished","text":"<p>Method for getting unpublished items.</p>"},{"location":"usage/core/#publicationdatesmixin","title":"PublicationDatesMixin","text":"<p>Mixin with the functionality of publishing in a certain period.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; FooModel.object.published()\n&gt;&gt;&gt; FooModel.object.unpublished()\n</code></pre>"},{"location":"usage/core/#published_1","title":"published","text":"<p>Method to getting published items.</p>"},{"location":"usage/core/#unpublished_1","title":"unpublished","text":"<p>Method for getting unpublished items.</p>"},{"location":"usage/core/#utils","title":"Utils","text":""},{"location":"usage/core/#datetime","title":"datetime","text":""},{"location":"usage/core/#format_date_from_to","title":"format_date_from_to","text":"<p>Method to display date period.</p> <p>Possible output formats depending on the input data:</p> <ul> <li><code>DD.MM.YYYY - DD.MM.YYYY</code></li> <li><code>DD.MM - DD.MM.YYYY</code></li> <li><code>DD - DD.MM.YYYY</code></li> <li><code>DD.MM.YYYY</code></li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; print(format_date_from_to(dt.date(2020, 1, 1), dt.date(2020, 2, 1)))\n01.01 - 01.02.2020\n</code></pre> <p>Attributes:</p> <ul> <li> date_start         \u2013          <p>Period start date.</p> </li> <li> date_end         \u2013          <p>Period end date.</p> </li> <li> delimiter         \u2013          <p>Dates delimiter.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>Date period string.</p> </li> </ul>"},{"location":"usage/core/#crypt","title":"crypt","text":"<p>This module contains two extremely simplified functions for encrypting and decrypting a message using the AES algorithm and the GCM method. The main task that these functions are designed to solve is to encrypt small amounts of data for situations such as password recovery links and the like.</p> <p>Note</p> <p>These functions are just a wrapper for encryption methods from the pycryptodome library (you also need to install it).</p>"},{"location":"usage/core/#encrypt_message","title":"encrypt_message","text":"<p>Method for encrypting a message with AES algorithm and the GCM method.</p>"},{"location":"usage/core/#decrypt_message","title":"decrypt_message","text":"<p>Method for decrypting a message encrypted with AES algorithm and the GCM method.</p> <p>Methods for encryption use a key that can be set in the CRYPTO_KEY parameter. By default, the parameter uses the first 32 characters of SECRET_KEY.</p>"},{"location":"usage/core/#frontend","title":"frontend","text":""},{"location":"usage/core/#get_link","title":"get_link","text":"<p>get_link is a method for getting a link to a resource.</p> <p>Modern sites mainly work according to the scheme when the backend provides an api to which the front sends requests, in this regard, reverse, which provides django, cannot give actual links to the resource, but links are still needed in the backend (for example, in letters and sms sent to the user or in admin panel for managers). As a result, this small utility was implemented that will help you get a link to the desired resource.</p> <p>To use the utility, you must specify a list of links in the FRONTEND_URLS parameter, and also, if you plan to receive absolute links, the frontend domain in the FRONTEND_DOMAIN parameter:</p> settings.py<pre><code>MERINGUE = {\n\"FRONTEND_URLS\": {\n\"index\": \"/\"\n\"user\": \"/user/{id}\"\n},\n\"FRONTEND_DOMAIN\": \"https://example.com\",\n}\n</code></pre> <p>You can get links in code like this:</p> <pre><code>&gt;&gt;&gt; from meringue.core.utils.frontend import get_link\n&gt;&gt;&gt; get_link(\"index\")\nhttps://example.com/\n&gt;&gt;&gt; get_link(\"user\", id=123)\nhttps://example.com/user/123\n</code></pre>"},{"location":"usage/core/#templatetags","title":"Templatetags","text":""},{"location":"usage/core/#cop_year","title":"cop_year","text":"<p>A tag that displays the year or range of years for the copyright string in <code>YYYY-YYYY</code> format.</p> <p>Examples:</p> <pre><code>&lt;p&gt;Copyright \u00a9 {% cop_year %} My company&lt;/p&gt;\n</code></pre> <p>Raises:</p> <ul> <li> <code>Exception</code>           \u2013          <p>To use the <code>cop_year</code> tag, you must fill in the <code>COP_YEAR</code> parameter in the meringue settings</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>Year for copyrights.</p> </li> </ul> <p>For the tag to work, you must fill in the COP_YEAR parameter in the settings.</p> <p>Also, in the COP_YEARS_DIFF parameter, you can specify the minimum difference in years when the period in copyrights will be displayed, and not the current year.</p>"},{"location":"usage/core/#date_range","title":"date_range","text":"<p>Return range of date in one of the following formats:</p> <ul> <li><code>DD.MM.YYYY - DD.MM.YYYY</code></li> <li><code>DD.MM - DD.MM.YYYY</code></li> <li><code>DD - DD.MM.YYYY</code></li> <li><code>DD.MM.YYYY</code></li> </ul> <p>Attributes:</p> <ul> <li> date_start         \u2013          <p>Period start date.</p> </li> <li> date_end         \u2013          <p>Period end date.</p> </li> </ul> <p>Examples:</p> <pre><code>{% date_range date_start date_end %}\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>Date period.</p> </li> </ul>"},{"location":"usage/core/#translations","title":"Translations","text":"<p>If you use djano-modeltranslation, then when connecting <code>meringue.core</code>, you can register fields for translations by setting the list of fields in the <code>m_translate_fields</code> field in the meta of the corresponding model:</p> <pre><code>class FooModel(models.Model):\nname = models.CharField(max_length=32)\nclass Meta:\nm_translate_fields = [\"name\", ]\n</code></pre>"},{"location":"usage/core/#upload-handlers","title":"Upload handlers","text":"<p>The standard django load handlers leave the original file name where possible. However, often when uploading a file to the server, the file can be called somehow ugly (and sometimes indecent), in order to avoid this problem, the following two upload handlers are implemented - MemoryFileUploadHandler and TemporaryFileUploadHandler. These two loaders replace the corresponding django loaders but in the process they rename the file being loaded.</p> <p>The renaming process can be overridden by specifying your own renaming method in the UPLOAD_RENAME_HANDLER parameter.</p> <p>To use them, specify them in the FILE_UPLOAD_HANDLERS parameter:</p> <pre><code>FILE_UPLOAD_HANDLERS = [\n\"meringue.core.upload_handlers.TemporaryFileUploadHandler\",\n\"meringue.core.upload_handlers.MemoryFileUploadHandler\",\n]\n</code></pre>"},{"location":"usage/core/#views","title":"Views","text":""},{"location":"usage/core/#im_a_teapot","title":"im_a_teapot","text":"<p>We all at some point want to brew boiling water.</p> <p>Examples:</p> urls.py<pre><code>from django.urls import path\nfrom meringue.core.views import im_a_teapot\nurlpatterns = [\npath('make_coffee', im_a_teapot, name=\"make_coffee\"),\n]\n</code></pre>"}]}