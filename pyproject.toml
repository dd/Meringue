[build-system]
requires = ["hatchling>=1.14.1"]
build-backend = "hatchling.build"

[project]
name = "meringue"
description = "A set of various functionality for a Django based web application."
readme = "README.md"
requires-python = ">=3.7"
license = "LGPL-3.0"
authors = [
	{ name = "Dmitry Dobrynin", email = "dd@manin.space" },
]
keywords = ["django", "utils"]
classifiers = [
	"Development Status :: 4 - Beta",
	"Environment :: Plugins",
	"Environment :: Web Environment",
	"Framework :: Django",
	"Framework :: Django :: 1",
	"Framework :: Django :: 1.11",
	"Framework :: Django :: 2",
	"Framework :: Django :: 2.0",
	"Framework :: Django :: 2.1",
	"Framework :: Django :: 2.2",
	"Framework :: Django :: 3",
	"Framework :: Django :: 3.0",
	"Framework :: Django :: 3.1",
	"Framework :: Django :: 3.2",
	"Framework :: Django :: 4",
	"Framework :: Django :: 4.0",
	"Framework :: Django :: 4.1",
	"Framework :: Django :: 4.2",
	"Intended Audience :: Developers",
	"License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
	# "Natural Language :: English",
	"Natural Language :: Russian",
	"Operating System :: OS Independent",
	"Programming Language :: Python",
	"Programming Language :: Python :: 3",
	"Programming Language :: Python :: 3.7",
	"Programming Language :: Python :: 3.8",
	"Programming Language :: Python :: 3.9",
	"Programming Language :: Python :: 3.10",
	"Programming Language :: Python :: 3.11",
	"Programming Language :: Python :: 3.12",
	"Programming Language :: Python :: 3 :: Only",
	"Programming Language :: Python :: Implementation :: CPython",
	"Programming Language :: Python :: Implementation :: PyPy",
	"Topic :: Internet :: WWW/HTTP",
	"Topic :: Internet :: WWW/HTTP :: WSGI",
	"Topic :: Internet :: WWW/HTTP :: Dynamic Content",
	"Topic :: Software Development :: Libraries",
]
dependencies = [
	"Django>=1.11.17",
]
dynamic = ["version"]

[project.urls]
"Homepage" = "https://github.com/dd/Meringue"
# "Documentation" = "https://github.com/dd/Meringue"
"Repository" = "https://github.com/dd/Meringue"
"Changelog" = "https://github.com/dd/Meringue/blob/master/CHANGELOG.md"
"Bug Tracker" = "https://github.com/dd/Meringue/issues"

[project.optional-dependencies]
pillow = [
	"Pillow==7.2.0",
]
crypto = [
	"pycryptodome==3.9.7",
]
openpyxl = [
	"openpyxl==2.6.1",
]
python-phonenumbers = [
	"phonenumbers==8.10.8",
]
django-pipeline = [
	"django-pipeline==1.7.0",
	"django-pipeline-browserify==0.6.2",
]

[tool.hatch.version]
path = "meringue/__init__.py"

[tool.hatch.build]
include = [
	"meringue",
	"AUTHORS",
]
exclude = [
	"docs",
	"hooks",
	".gitignore",
	"CHANGELOG.md",
]

[tool.hatch.envs.default]
description = "Dev environment"
pre-install-commands = [
	"git config --local gitflow.branch.master \"master\"",
	"git config --local gitflow.branch.develop \"dev\"",
	"git config --local gitflow.prefix.feature \"feature/\"",
	"git config --local gitflow.prefix.bugfix \"bugfix/\"",
	"git config --local gitflow.prefix.release \"release/\"",
	"git config --local gitflow.prefix.hotfix \"hotfix/\"",
	"git config --local gitflow.prefix.support \"support/\"",
	"git config --local gitflow.prefix.versiontag \"v\"",
	"git config --local gitflow.path.hooks $(pwd)\"/.git/hooks\"",
]
dependencies = [
	"pre-commit==3.3.2",
]

[tool.hatch.envs.default.scripts]
precommit_install = "pre-commit install {args:--hook-type commit-msg}"
precommit_uninstall = "pre-commit uninstall {args:--hook-type commit-msg}"
init = ["precommit_install"]
remove = ["precommit_uninstall"]

[tool.hatch.envs.lint]
description = "Lint environment"
detached = true
dependencies = [
	"ruff==0.0.271",
	"black==23.3.0",
]

[tool.hatch.envs.lint.scripts]
check = [
	"ruff {args:.}",
	"black --check --diff {args:.}",
]
format = [
	"ruff --fix {args:.}",
	"black {args:.}",
]

[tool.hatch.envs.docs]
description = "Docs environment"
detached = true
dependencies = [
	"mkdocs[i18n]==1.4.3",
	"mkdocs-literate-nav==0.6.0",
	"mkdocs-material==9.1.15",
	"mkdocs-git-revision-date-localized-plugin==1.2.0",
	"mkdocs-git-authors-plugin==0.7.1",
	"mkdocstrings[python]==0.22.0",
]
[tool.hatch.envs.docs.scripts]
build = ["mkdocs build"]
serve = ["mkdocs serve"]

[tool.black]
line-length = 99
target-version = ["py37"]

[tool.ruff]
target-version = "py37"
line-length = 99
show-fixes = true
# update-check = true
select = [
	"A",
	"B",
	"C",
	"DTZ",
	"E",
	"EM",
	"F",
	"FBT",
	"I",
	"ICN",
	"ISC",
	"N",
	"PLC",
	"PLE",
	"PLR",
	"PLW",
	"Q",
	"RUF",
	"S",
	"SIM",
	"T",
	"TID",
	"UP",
	"W",
	"YTT",
]
ignore = [
	"RUF002",  # Allow russian at docstrings
	"RUF003",  # Allow russian at comment
	"FBT002",  # Allow boolean positional argument define
	"PLR0913",  # Allow any number of function arguments
	# # Allow non-abstract empty methods in abstract base classes
	# "B027",
	# # Allow boolean positional values in function calls, like `dict.get(... True)`
	# "FBT003",
	# # Ignore checks for possible passwords
	# "S105", "S106", "S107",
	# # Ignore complexity
	# "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
	# "PLC1901", # empty string comparisons
	# "PLW2901", # `for` loop variable overwritten
	# "SIM114", # Combine `if` branches using logical `or` operator
]
# unfixable = [
# 	# Don't touch unused imports
# 	"F401",
# ]

[tool.ruff.flake8-import-conventions]

[tool.ruff.flake8-import-conventions.extend-aliases]
"datetime" = "dt"

# [tool.ruff.flake8-quotes]
# inline-quotes = "single"

[tool.ruff.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.isort]
force-single-line = true
known-first-party = ["meringue"]
lines-after-imports = 2
no-lines-before = ["local-folder"]
section-order = ["future", "standard-library", "django", "third-party", "first-party", "local-folder"]

[tool.ruff.isort.sections]
django = ["django"]

[tool.isort]
known_first_party = ["meringue"]
lines_after_imports = 2
no_lines_before = ["LOCALFOLDER"]
known_django = "django"
sections = ["FUTURE", "STDLIB", "DJANGO", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
force_single_line  = true
