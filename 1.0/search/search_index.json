{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Meringue <p>Package with various functional (such as mixins, form utils, upload handlers and other) for Django Framework.</p> <p>This library is a set of various functionality that I use from project to project.</p> <p>The main task of this package is to clean up this functionality, test it, and also organize the documentation so that colleagues can understand how and what works.</p> <p>However, if someone decides to use this functionality in their project, and even more so to add functionality or change the implementation to a more correct, beautiful or understandable one, I will only be happy, do not worry and feel free to write to me by mail, create an issue or pull request on github.</p>"},{"location":"#roadmap","title":"Roadmap","text":""},{"location":"#first-stage","title":"First stage","text":"<p>Refactoring old functionality and getting rid of unnecessary</p> <ul> <li>models<ul> <li> Mixin with ctime and mtime fields</li> <li> Abstract model with sort field<ul> <li> Add abstract model</li> <li> Add a manager with a method to correct sorting</li> <li> Testing</li> </ul> </li> <li> Abstract model with publishing flag</li> <li> Abstract model with the functionality of publishing in a certain period</li> </ul> </li> <li>i18n<ul> <li> Field translation simplification functionality when using django-modeltranslation</li> <li> Localization of all texts in the library</li> </ul> </li> <li>utils<ul> <li> Method and template tag for getting date range</li> </ul> </li> <li>template tags<ul> <li> Template tag for generating the year for the copyright string (like Copyright \u00a9 2014-2023)</li> </ul> </li> <li>other<ul> <li> Upload handlers with renaming uploaded files</li> </ul> </li> </ul>"},{"location":"#second-stage","title":"Second stage","text":"<p>Adding new functionality. Can change.</p> <ul> <li>Universal manager worked with all abstract models</li> <li>Tests of all functionality</li> <li>Methods for encrypting and decrypting text content (To create various secrets, such as a link to change your password or activate your profile).</li> <li>Functionality for obtaining absolute links to resources presented on the front, located on another domain (When working through api) (utils methods, template tags and filters).</li> <li>drf serializer serializer for automatic form generation on the front when working through rest api. (An npm package on vuejs will also be developed  generating form based on response from api).</li> <li>Extended drf router that allows you to add resources like <code>/profile</code> returning the profile data of an authorized user without his id.</li> <li>Authorization backend for authorization by a pair of email and password.</li> <li>Helpers to extend documentation generated by drf-spectacular - just a small helper to easily add links to different deployed environments (production, test, local, etc.) or let's say for more digestible tags instead of initially generated ones</li> <li>Functionality for working with images.<ul> <li>Image editor like easy_thumbnails.</li> <li>A field for the drf serializer that returns a set of images (for example, a standard image and a double-sized image for a retina screen), as well as in different formats (for example, in the original format and in webp).</li> </ul> </li> <li>Functionality similar to that described in the previous paragraph only for video.</li> <li>Functionality for loading private files available through nginx internal.</li> <li>Exception handler for drf that returns an error code in addition to the error text</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<ul> <li> Use Git Flow (read here and here) to resolve the versioning</li> <li> Linter with a Ruff</li> <li> Formatter with a Black</li> <li> Lint commit with Gitlint and Conventional Commits</li> <li> Documentation with mkdocs and mkdocs-material</li> <li> Testing local with hatch</li> <li> Testing in CI/CD on push</li> <li> Add mypy ???</li> </ul>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>Usage<ul> <li>Configurations</li> <li>Core</li> </ul> </li> <li>Code Reference</li> <li>Contributing<ul> <li>Introduction</li> <li>Documentations<ul> <li>Introduction</li> <li>Examples</li> </ul> </li> <li>Tests</li> </ul> </li> </ul>"},{"location":"dev/contributing/","title":"Contributing","text":"<p>Please don't be shy - comment, discuss and suggest whatever you think is important in the discussions on github, if you notice a bug please describe it in issues, and if you decide to contribute to the development of the project, feel free to send pull request, and if possible, read further during development this section.</p> <p>When developing, modifying and fixing a feature, please fill in and correct all annotations and docstrings in the code, and also try, if possible, to fill in / supplement the description of the functionality and its use in the section of the documentation, also add tests for new or fixed functionality, read more below:</p>"},{"location":"dev/contributing/#environment","title":"Environment","text":"<p>To work, you need a configured environment, for this there is the following script:</p> <pre><code>$ hatch run init\n</code></pre> <p>Note</p> <p>All development is done using hatch. To work with it, you will need to install it globally, I advise you to do this using pipx.</p> <p>This script will completely configure the environment - configure gitflow, connect git hooks, and install and configure a virtual environment, to run python in this environment, run the following command:</p> <pre><code>$ hatch run ipython\n</code></pre>"},{"location":"dev/contributing/#git-flow","title":"Git flow","text":"<p>As you develop and refine, please try to keep your repository consistent with gitflow.</p>"},{"location":"dev/contributing/#internationalization","title":"Internationalization","text":"<p>To add translations there are two useful commands:</p>"},{"location":"dev/contributing/#makemessages","title":"<code>makemessages</code>","text":"<pre><code>$ hatch run makemessages\n</code></pre> <p>This is a wrapper around the makemessages django command and creates/updates localization files in each meringue application.</p>"},{"location":"dev/contributing/#compilemessages","title":"<code>compilemessages</code>","text":"<pre><code>$ hatch run compilemessages\n</code></pre> <p>This is a wrapper around the compilemessages django command and compiles all translations.</p>"},{"location":"dev/contributing/#tests","title":"Tests","text":"<p>When working on a project, it is extremely important to cover everything with tests in order to avoid problems and errors in the code. See working on tests in the appropriate section.</p>"},{"location":"dev/contributing/#documentation","title":"Documentation","text":"<p>The documentation is implemented using the mkdocs generator and the mkdocs material theme. When working on library functionality, two main sections usage and reference are important. For more information about developing documentation, see the corresponding section.</p>"},{"location":"dev/contributing/#versioning","title":"Versioning","text":"<p>To update the version, use hatch version</p> <p>show current version:</p> <pre><code>$ hatch version\n1.0.0a0\n</code></pre> <p>update patch and beta version from <code>1.0.0a0</code> to <code>1.0.1b0</code></p> <pre><code>$ hatch version patch,beta\nOld: 1.0.0a0\nNew: 1.0.1b0\n</code></pre>"},{"location":"dev/contributing/#commit-message-convention","title":"Commit message convention","text":"<p>To write a commit, we adhere to the Conventional Commits specification, as well as gitmoji as a special case of conventional commits. You can use gitmoji-cli for this process. This will help us generate a changelog (and in the future we may automate this based on commits).</p> <p>Info</p> <p>The list of emoji needs to be improved, now it is bloated and there are controversial points like  which means deleting the code...</p>"},{"location":"dev/tests/","title":"Tests","text":"<p>The project uses pytest for testing, and has set up coverage tests using pytest-cov.</p> <p>You can run tests in a development environment with the following command:</p> <pre><code>$ hatch run test:check\n</code></pre> <p>A matrix for a set of python and django versions is also configured in hatch, you can see more about this in the settings in the <code>pyproject.toml</code> file, you can run the entire test matrix with the hatch script:</p> <pre><code>$ hatch run mtest:check\n</code></pre>"},{"location":"dev/tests/#development","title":"Development","text":"<p>When developing tests, you may need to create new migrations, this can be done with the following command</p> <pre><code>$ hatch run test:makemigrations\n</code></pre>"},{"location":"dev/docs/","title":"Documentation","text":"<p>To develop documentation, use mkdocs with the theme mkdocs-material.</p> <p>Sources for documentation generation parse mkdocstring-python which can handle multiple formats, we use Google-style (this only applies to docstrings), but not pure, and its variation is napoleon (But of course this is a debatable issue, and we can change if there are suggestions).</p>"},{"location":"dev/docs/#local-development","title":"Local development","text":"<p>In the simplest case, running a local server with development documentation would look like this:</p> <pre><code>$ hatch run docs:serve\n</code></pre>"},{"location":"dev/docs/#building-and-publishing","title":"Building and publishing","text":"<p>There is a separate <code>hatch run docs:build</code> command for the documentation build.</p> <p>Documentation is published automatically and configured in readthedocs.</p>"},{"location":"dev/docs/#configuration","title":"Configuration","text":"<p>There are several options for documentation configuration:</p>"},{"location":"dev/docs/#meringue_mkdocs_code_parce_enabled","title":"<code>MERINGUE_MKDOCS_CODE_PARCE_ENABLED</code>","text":"<p><code>default: true</code></p> <p>Enabling / disabling the output of sources in the documentation \"on-the-fly\" (organized based on the example from the mkdocstrings documentation).</p>"},{"location":"dev/docs/#meringue_mkdocs_code_parce_source_path","title":"<code>MERINGUE_MKDOCS_CODE_PARCE_SOURCE_PATH</code>","text":"<p><code>default: \"meringue\"</code></p> <p>A directory with sources for \"on-the-fly\" generation.</p>"},{"location":"dev/docs/#meringue_mkdocs_code_parce_docs_path","title":"<code>MERINGUE_MKDOCS_CODE_PARCE_DOCS_PATH</code>","text":"<p><code>default: \"reference\"</code></p> <p>Documentation directory for displaying \"on-the-fly\" generated source documentation.</p>"},{"location":"dev/docs/#meringue_mkdocs_code_parce_show_nav","title":"<code>MERINGUE_MKDOCS_CODE_PARCE_SHOW_NAV</code>","text":"<p><code>default: false</code></p> <p>Parameter for debugging generated \"on-the-fly\" navigation.</p>"},{"location":"dev/docs/#meringue_mkdocs_enabled_git_revision_date","title":"<code>MERINGUE_MKDOCS_ENABLED_GIT_REVISION_DATE</code>","text":"<p><code>default: true</code></p> <p>Option to enable/disable modification dates for documentation files. It will be useful to disable it when developing locally so that the console is not clogged with errors.</p>"},{"location":"dev/docs/#meringue_mkdocs_offline","title":"<code>MERINGUE_MKDOCS_OFFLINE</code>","text":"<p><code>default: false</code></p> <p>Parameter for building documentation into a build working from a folder, without the need to start the server. read more about the mechanism here.</p>"},{"location":"dev/docs/#meringue_mkdocs_enable_minify","title":"<code>MERINGUE_MKDOCS_ENABLE_MINIFY</code>","text":"<p><code>default: true</code></p> <p>Parameter to enable plugin minify minifying html, js and css when generating documentation.</p> <p>When working with local server documentation, this option is disabled.</p>"},{"location":"dev/docs/examples/","title":"Examples of blocks for writing documentation","text":"<p>A collection of examples of non-obvious blocks that can be used when writing documentation.</p>"},{"location":"dev/docs/examples/#admonitions","title":"Admonitions","text":"<p>docs | supported types</p> CodePreview <pre><code>!!! note\n\n\tYou should note that the title will be automatically capitalized.\n</code></pre> <p>Note</p> <p>You should note that the title will be automatically capitalized.</p>"},{"location":"dev/docs/examples/#inline-usage","title":"inline usage","text":"inline end inline <p>Lorem ipsum</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>!!! info inline end \"Lorem ipsum\"\n\n\tLorem ipsum dolor sit amet, consectetur\n\tadipiscing elit. Nulla et euismod nulla.\n\tCurabitur feugiat, tortor non consequat\n\tfinibus, justo purus auctor massa, nec\n\tsemper lorem quam in massa.\n</code></pre> <p>Use <code>inline end</code> to align to the right (left for rtl languages).</p> <p>Lorem ipsum</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>!!! info inline \"Lorem ipsum\"\n\n\tLorem ipsum dolor sit amet, consectetur\n\tadipiscing elit. Nulla et euismod nulla.\n\tCurabitur feugiat, tortor non consequat\n\tfinibus, justo purus auctor massa, nec\n\tsemper lorem quam in massa.\n</code></pre> <p>Use <code>inline</code> to align to the left (right for rtl languages).</p>"},{"location":"dev/docs/examples/#collapsible-blocks","title":"Collapsible blocks","text":"<p>docs</p> <pre><code>???+ note \"Open styled details\"\n\n\t??? danger \"Nested details!\"\n\t\tAnd more content again.\n</code></pre> Open styled details Nested details! <p>And more content again.</p>"},{"location":"dev/docs/examples/#footnotes","title":"Footnotes","text":"<p>docs</p> <pre><code>Footnotes[^1] have a label[^test-label] and the footnote's content.\n\n[^1]: This is a footnote content.\n[^test-label]: A footnote on the label: \"test-label\".\n</code></pre> <p>Footnotes1 have a label2 and the footnote's content.</p>"},{"location":"dev/docs/examples/#highlight","title":"Highlight","text":"<p>docs</p> CodePreview <pre><code>```console linenums=\"42\" hl_lines=\"1 4-6\"\n$ echo hello world!\nhello world!\n\n$ git clone git@github.com:dd/Meringue.git\n$ cd Meringue\n$ hatch run docs:serve\nINFO     -  Building documentation...\nINFO     -  Cleaning site directory\nINFO     -  mkdocstrings_handlers: Formatting signatures requires Black to be\n\t\t\tinstalled.\nINFO     -  Documentation built in 1.96 seconds\nINFO     -  [02:05:37] Watching paths for changes: 'docs/src', 'mkdocs.yml',\n\t\t\t'docs/theme', 'meringue', 'README.md'\nINFO     -  [02:05:37] Serving on http://127.0.0.1:7000/\n```\n</code></pre> <pre><code>```pycon\n&gt;&gt;&gt; for word in (\"Hello\", \"mkdocstrings!\"):\n...     print(word, end=\" \")\n...\nHello mkdocstrings!\n```\n</code></pre> <pre><code>$ echo hello world!\nhello world!\n$ git clone git@github.com:dd/Meringue.git\n$ cd Meringue\n$ hatch run docs:serve\nINFO     -  Building documentation...\nINFO     -  Cleaning site directory\nINFO     -  mkdocstrings_handlers: Formatting signatures requires Black to be\n\t\t\tinstalled.\nINFO     -  Documentation built in 1.96 seconds\nINFO     -  [02:05:37] Watching paths for changes: 'docs/src', 'mkdocs.yml',\n\t\t\t'docs/theme', 'meringue', 'README.md'\nINFO     -  [02:05:37] Serving on http://127.0.0.1:7000/\n</code></pre> <pre><code>&gt;&gt;&gt; for word in (\"Hello\", \"mkdocstrings!\"):\n...     print(word, end=\" \")\n...\nHello mkdocstrings!\n</code></pre>"},{"location":"dev/docs/examples/#inline","title":"Inline","text":"<p>docs</p> <pre><code>`#!console $ python3 manage.py runserver`\n</code></pre> <p><code>$ python3 manage.py runserver</code></p> <pre><code>`#!python3 import this`\n</code></pre> <p><code>import this</code></p>"},{"location":"dev/docs/examples/#annotates","title":"Annotates","text":"<p>docs</p> <pre><code>```python\nimport this # (1)\n```\n1.  :fontawesome-brands-python: Simple is better than complex.\n</code></pre> <pre><code>import this # (1)\n</code></pre> <ol> <li> Simple is better than complex.</li> </ol>"},{"location":"dev/docs/examples/#diagrams","title":"Diagrams","text":"<p>docs</p> <pre><code>```mermaid\ngraph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];\n```\n</code></pre> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre>"},{"location":"dev/docs/examples/#content-tabs","title":"Content tabs","text":"<p>docs</p> <pre><code>=== \"Tab 1\"\n\tMarkdown **content**.\n\n\tMultiple paragraphs.\n\n=== \"Tab 2\"\n\tMore Markdown **content**.\n\n- list item a\n\t- list item b\n</code></pre> Tab 1Tab 2 <p>Markdown content.</p> <p>Multiple paragraphs.</p> <p>More Markdown content.</p> <ul> <li>list item a</li> <li>list item b</li> </ul>"},{"location":"dev/docs/examples/#smart-symbols","title":"Smart Symbols","text":"<p>docs</p> Markdown Result Markdown Result <code>(tm)</code> \u2122 <code>&lt;--</code> \u2190 <code>(c)</code> \u00a9 <code>&lt;--&gt;</code> \u2194 <code>(r)</code> \u00ae <code>=/=</code> \u2260 <code>c/o</code> \u2105 <code>1/4, etc.</code> \u00bc, etc. <code>+/-</code> \u00b1 <code>1st 2nd etc.</code> 1st 2nd etc. <code>--&gt;</code> \u2192"},{"location":"dev/docs/examples/#keys","title":"Keys","text":"<p>docs</p> <pre><code>++ctrl+alt+delete++\n</code></pre> <p>Ctrl+Alt+Del</p>"},{"location":"dev/docs/examples/#icons-and-emojis","title":"Icons and Emojis","text":"<p>docs | icon search</p> <pre><code>:fontawesome-brands-twitter:{ .twitter } :smile: :heart: :thumbsup:\n</code></pre> <p> </p>"},{"location":"dev/docs/examples/#tooltips","title":"Tooltips","text":"<p>docs</p> <pre><code>[Hover me](https://example.com \"I'm a tooltip!\")\n</code></pre> <p>Hover me</p>"},{"location":"dev/docs/examples/#lists","title":"Lists","text":"<p>docs</p> CodePreview <pre><code>- [X] item 1\n\t* [X] item A\n\t* [ ] item B\n\t\tmore text\n\t\t+ [x] item a\n\t\t+ [ ] item b\n\t\t+ [x] item c\n\t* [X] item C\n- [ ] item 2\n- [ ] item 3\n</code></pre> <ul> <li> item 1<ul> <li> item A</li> <li> item B     more text<ul> <li> item a</li> <li> item b</li> <li> item c</li> </ul> </li> <li> item C</li> </ul> </li> <li> item 2</li> <li> item 3</li> </ul>"},{"location":"dev/docs/examples/#tables","title":"Tables","text":"<p>docs</p> CodePreview <pre><code>First Header | Second Header\n------------ | -------------\nContent Cell | Content Cell\nContent Cell | Content Cell\n</code></pre> First Header Second Header Content Cell Content Cell Content Cell Content Cell <ol> <li> <p>This is a footnote content.\u00a0\u21a9</p> </li> <li> <p>A footnote on the label: \"test-label\".\u00a0\u21a9</p> </li> </ol>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>conf<ul> <li>_init_.py</li> <li>default_settings.py</li> </ul> </li> <li>core<ul> <li>templatetags<ul> <li>_init_.py</li> <li>meringue_base.py</li> </ul> </li> <li>utils<ul> <li>_init_.py</li> <li>datetime.py</li> </ul> </li> <li>_init_.py</li> <li>apps.py</li> <li>managers.py</li> <li>models.py</li> <li>options.py</li> <li>query.py</li> <li>translation.py</li> <li>upload_handlers.py</li> <li>views.py</li> </ul> </li> <li>_init_.py</li> </ul>"},{"location":"reference/meringue/__init__/","title":"__init__.py","text":""},{"location":"reference/meringue/__init__/#meringue","title":"meringue","text":""},{"location":"reference/meringue/__init__/#meringue.__version__","title":"__version__  <code>module-attribute</code>","text":"<pre><code>__version__ = '1.0.0a0'\n</code></pre> <p>To update the version, use hatch version</p> <p>show current version:</p> <pre><code>$ hatch version\n1.0.0a0\n</code></pre> <p>update patch and beta version from <code>1.0.0a0</code> to <code>1.0.1b0</code></p> <pre><code>$ hatch version patch,beta\nOld: 1.0.0a0\nNew: 1.0.1b0\n</code></pre>"},{"location":"reference/meringue/conf/__init__/","title":"__init__.py","text":""},{"location":"reference/meringue/conf/__init__/#meringue.conf","title":"meringue.conf","text":""},{"location":"reference/meringue/conf/__init__/#meringue.conf.SETTING_KEY","title":"SETTING_KEY  <code>module-attribute</code>","text":"<pre><code>SETTING_KEY: Final[str] = 'MERINGUE'\n</code></pre> <p>Parameter name in django settings for meringue settings.</p> <p>Examples:</p> settings.py<pre><code>MERINGUE = {\n\"FRONTEND_URL\": \"http://meringue.local:9000/\",\n}\n</code></pre>"},{"location":"reference/meringue/conf/__init__/#meringue.conf.DEPRECATED_PARAMS","title":"DEPRECATED_PARAMS  <code>module-attribute</code>","text":"<pre><code>DEPRECATED_PARAMS: Final[dict[str, str]] = {}\n</code></pre> <p>Dict with deprecated options and warning texts for them.</p> <p>Examples:</p> <pre><code>DEPRECATED_PARAMS = {\n\"PROTOCOL\": \"The `PROTOCOL` option is deprecated, use `BACKEND_PROTOCOL` instead.\",\n}\n</code></pre>"},{"location":"reference/meringue/conf/__init__/#meringue.conf.PARAMS_TO_IMPORT","title":"PARAMS_TO_IMPORT  <code>module-attribute</code>","text":"<pre><code>PARAMS_TO_IMPORT: Final[list[str]] = [\n\"UPLOAD_RENAME_HANDLER\"\n]\n</code></pre> <p>List of options that contain the path to the module and must be imported.</p> <p>Examples:</p> <pre><code>PARAMS_TO_IMPORT = [\n\"UPLOAD_RENAME_HANDLER\",\n]\n</code></pre>"},{"location":"reference/meringue/conf/__init__/#meringue.conf.Settings","title":"Settings","text":"<pre><code>Settings(\nsetting_key: str,\ndefaults: dict[str, str],\ndeprecated_params: dict[str, str] | None = None,\nparams_to_impoprt: list[str] | None = None,\n)\n</code></pre> <p>A settings object.</p> <p>The settings are obtained from the django settings by the name of the key which should contain an object with all the application settings.</p> <p>Attributes:</p> <ul> <li> setting_key         \u2013          <p>Settings key in django settings list.</p> </li> <li> defaults         \u2013          <p>Dict with default parameter values. Used as a list of available settings.</p> </li> <li> deprecated_params         \u2013          <p>Dict with deprecated options and warning texts for them.</p> </li> <li> params_to_impoprt         \u2013          <p>List of options that contain the path to the module and must be imported.</p> </li> </ul> Source code in <code>meringue/conf/__init__.py</code> <pre><code>def __init__(\nself,\nsetting_key: str,\ndefaults: dict[str, str],\ndeprecated_params: dict[str, str] | None = None,\nparams_to_impoprt: list[str] | None = None,\n):\n\"\"\"\n    Attributes:\n        setting_key: Settings key in django settings list.\n        defaults: Dict with default parameter values. Used as a list of available settings.\n        deprecated_params: Dict with deprecated options and warning texts for them.\n        params_to_impoprt: List of options that contain the path to the module and must be\n            imported.\n    \"\"\"\nself.setting_key = setting_key\nif isinstance(defaults, ModuleType):\nself.defaults = {}\nfor key in dir(defaults):\nif key.isupper():\nself.defaults[key] = getattr(defaults, key)\nelse:\nself.defaults = defaults\nself.deprecated_params = deprecated_params or {}\nself.params_to_impoprt = params_to_impoprt or []\nself._cached_attrs = set()\nself.reset()\n</code></pre>"},{"location":"reference/meringue/conf/__init__/#meringue.conf.Settings.__getattr__","title":"__getattr__","text":"<pre><code>__getattr__(attr: str) -&gt; Any\n</code></pre> <p>Gets the parameter value and caches it in the attributes of the settings object.</p> <p>Attributes:</p> <ul> <li> attr         \u2013          <p>Setting parameter name.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>AttributeError</code>           \u2013          <p>Error when trying to get an unregistered parameter.</p> </li> </ul> <p>Warns:</p> <ul> <li> <code>DeprecationWarning</code>           \u2013          <p>A warning that the parameter is deprecated.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>         \u2013          <p>Setting value.</p> </li> </ul> Source code in <code>meringue/conf/__init__.py</code> <pre><code>def __getattr__(self, attr: str) -&gt; Any:\n\"\"\"\n    Gets the parameter value and caches it in the attributes of the settings object.\n    Attributes:\n        attr: Setting parameter name.\n    Raises:\n        AttributeError: Error when trying to get an unregistered parameter.\n    Warns:\n        DeprecationWarning: A warning that the parameter is deprecated.\n    Returns:\n        Setting value.\n    \"\"\"\nif attr not in self.defaults:\nraise AttributeError(\"Invalid setting key: '%s'\" % attr)\nif attr in self.deprecated_params:\nwarnings.warn(self.deprecated_params[attr], DeprecationWarning, stacklevel=2)\nval = self.user_params.get(attr, self.defaults[attr])\nif attr in self.params_to_impoprt:\nval = import_from_string(val, attr)\nself._cached_attrs.add(attr)\nsetattr(self, attr, val)\nreturn val\n</code></pre>"},{"location":"reference/meringue/conf/__init__/#meringue.conf.Settings.reset","title":"reset","text":"<pre><code>reset()\n</code></pre> <p>Reset downloaded settings, as well as clearing the cache.</p> Source code in <code>meringue/conf/__init__.py</code> <pre><code>def reset(self):\n\"\"\"\n    Reset downloaded settings, as well as clearing the cache.\n    \"\"\"\nfor attr in self._cached_attrs:\ndelattr(self, attr)\nself._cached_attrs = set()\nself.user_params = getattr(settings, self.setting_key, {})\n</code></pre>"},{"location":"reference/meringue/conf/__init__/#meringue.conf.import_from_string","title":"import_from_string","text":"<pre><code>import_from_string(val: str, attr: str) -&gt; Any\n</code></pre> <p>Imports a dotted module path and returns the attribute/class.</p> <p>Attributes:</p> <ul> <li> val         \u2013          <p>Dotted path to imported module.</p> </li> <li> attr         \u2013          <p>The name of the parameter in the library settings.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ImportError</code>           \u2013          <p>Attribute/class not exists.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>         \u2013          <p>Imported attribute/class.</p> </li> </ul> Source code in <code>meringue/conf/__init__.py</code> <pre><code>def import_from_string(val: str, attr: str) -&gt; Any:\n\"\"\"\n    Imports a dotted module path and returns the attribute/class.\n    Attributes:\n        val: Dotted path to imported module.\n        attr: The name of the parameter in the library settings.\n    Raises:\n        ImportError: Attribute/class not exists.\n    Returns:\n        Imported attribute/class.\n    \"\"\"\ntry:\nreturn import_string(val)\nexcept ImportError as e:\nmsg = f\"Could not import '{val}' for API setting '{attr}'.\\n{e.__class__.__name__}: {e}.\"\nraise ImportError(msg) from None\n</code></pre>"},{"location":"reference/meringue/conf/__init__/#meringue.conf.reset_settings","title":"reset_settings","text":"<pre><code>reset_settings(*args, **kwargs)\n</code></pre> <p>Settings change signal handler.</p> Source code in <code>meringue/conf/__init__.py</code> <pre><code>@receiver(setting_changed)\ndef reset_settings(*args, **kwargs):\n\"\"\"\n    Settings change signal handler.\n    \"\"\"\nif kwargs[\"setting\"] == SETTING_KEY:\nm_settings.reset()\n</code></pre>"},{"location":"reference/meringue/conf/default_settings/","title":"default_settings.py","text":""},{"location":"reference/meringue/conf/default_settings/#meringue.conf.default_settings","title":"meringue.conf.default_settings","text":""},{"location":"reference/meringue/conf/default_settings/#meringue.conf.default_settings.UPLOAD_RENAME_HANDLER","title":"UPLOAD_RENAME_HANDLER  <code>module-attribute</code>","text":"<pre><code>UPLOAD_RENAME_HANDLER: Final[\nstr\n] = \"meringue.core.upload_handlers.rename_handler\"\n</code></pre> <p>Path to method for renaming images on upload</p>"},{"location":"reference/meringue/conf/default_settings/#meringue.conf.default_settings.COP_YEAR","title":"COP_YEAR  <code>module-attribute</code>","text":"<pre><code>COP_YEAR: Final[int] = None\n</code></pre> <p>Project start year for the copyright tag</p>"},{"location":"reference/meringue/conf/default_settings/#meringue.conf.default_settings.COP_YEARS_DIFF","title":"COP_YEARS_DIFF  <code>module-attribute</code>","text":"<pre><code>COP_YEARS_DIFF: Final[int] = 10\n</code></pre> <p>Difference in years for which it is necessary to display the range of years</p>"},{"location":"reference/meringue/core/__init__/","title":"__init__.py","text":""},{"location":"reference/meringue/core/__init__/#meringue.core","title":"meringue.core","text":""},{"location":"reference/meringue/core/apps/","title":"apps.py","text":""},{"location":"reference/meringue/core/apps/#meringue.core.apps","title":"meringue.core.apps","text":""},{"location":"reference/meringue/core/managers/","title":"managers.py","text":""},{"location":"reference/meringue/core/managers/#meringue.core.managers","title":"meringue.core.managers","text":""},{"location":"reference/meringue/core/managers/#meringue.core.managers.SortingManager","title":"SortingManager","text":"<p>         Bases: <code>Manager</code></p> <p>Manager with sorting correction functionality.</p>"},{"location":"reference/meringue/core/models/","title":"models.py","text":""},{"location":"reference/meringue/core/models/#meringue.core.models","title":"meringue.core.models","text":""},{"location":"reference/meringue/core/models/#meringue.core.models.CMTimeMixin","title":"CMTimeMixin","text":"<p>         Bases: <code>models.Model</code></p> <p>A simple mixin to add ctime and mtime fields.</p>"},{"location":"reference/meringue/core/models/#meringue.core.models.SortingMixin","title":"SortingMixin","text":"<p>         Bases: <code>models.Model</code></p> <p>Simple mixin to add sorting field.</p>"},{"location":"reference/meringue/core/models/#meringue.core.models.PublicationMixin","title":"PublicationMixin","text":"<p>         Bases: <code>models.Model</code></p> <p>Mixin with the functionality of manual publishing.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; FooModel.object.published()\n&gt;&gt;&gt; FooModel.object.unpublished()\n</code></pre>"},{"location":"reference/meringue/core/models/#meringue.core.models.PublicationDatesMixin","title":"PublicationDatesMixin","text":"<p>         Bases: <code>models.Model</code></p> <p>Mixin with the functionality of publishing in a certain period.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; FooModel.object.published()\n&gt;&gt;&gt; FooModel.object.unpublished()\n</code></pre>"},{"location":"reference/meringue/core/options/","title":"options.py","text":""},{"location":"reference/meringue/core/options/#meringue.core.options","title":"meringue.core.options","text":""},{"location":"reference/meringue/core/query/","title":"query.py","text":""},{"location":"reference/meringue/core/query/#meringue.core.query","title":"meringue.core.query","text":""},{"location":"reference/meringue/core/query/#meringue.core.query.SortingQuerySet","title":"SortingQuerySet","text":"<p>         Bases: <code>QuerySet</code></p>"},{"location":"reference/meringue/core/query/#meringue.core.query.SortingQuerySet.correction_sorting","title":"correction_sorting","text":"<pre><code>correction_sorting()\n</code></pre> <p>This is a method to update/fix the sorting of the selected list of items.</p> <p>The sorting will be done according to the <code>queryset</code> sorting, so sorting can be controlled by executing <code>.order_by()</code> before calling the <code>correction_sorting</code> method.</p> <p>The selection for updating sorting can be pre-limited by filtering the list.</p> Source code in <code>meringue/core/query.py</code> <pre><code>def correction_sorting(self):\n\"\"\"\n    This is a method to update/fix the sorting of the selected list of items.\n    The sorting will be done according to the `queryset` sorting, so sorting can be controlled\n    by executing `.order_by()` before calling the `correction_sorting` method.\n    The selection for updating sorting can be pre-limited by filtering the list.\n    \"\"\"\nitems = []\nsorting = 0\nfor item in self:\nif item.sorting != sorting:\nitem.sorting = sorting\nitems.append(item)\nsorting += 1\nreturn self.bulk_update(items, [\"sorting\"])\n</code></pre>"},{"location":"reference/meringue/core/query/#meringue.core.query.PublicationQuerySet","title":"PublicationQuerySet","text":"<p>         Bases: <code>QuerySet</code></p>"},{"location":"reference/meringue/core/query/#meringue.core.query.PublicationQuerySet.published","title":"published","text":"<pre><code>published(*args, **kwargs)\n</code></pre> <p>Method to getting published items.</p> Source code in <code>meringue/core/query.py</code> <pre><code>def published(self, *args, **kwargs):\n\"\"\"\n    Method to getting published items.\n    \"\"\"\nkwargs[\"is_published\"] = True\nreturn self.filter(*args, **kwargs)\n</code></pre>"},{"location":"reference/meringue/core/query/#meringue.core.query.PublicationQuerySet.unpublished","title":"unpublished","text":"<pre><code>unpublished(*args, **kwargs)\n</code></pre> <p>Method for getting unpublished items.</p> Source code in <code>meringue/core/query.py</code> <pre><code>def unpublished(self, *args, **kwargs):\n\"\"\"\n    Method for getting unpublished items.\n    \"\"\"\nkwargs[\"is_published\"] = False\nreturn self.filter(*args, **kwargs)\n</code></pre>"},{"location":"reference/meringue/core/query/#meringue.core.query.PublicationDatesQuerySet","title":"PublicationDatesQuerySet","text":"<p>         Bases: <code>QuerySet</code></p>"},{"location":"reference/meringue/core/query/#meringue.core.query.PublicationDatesQuerySet.published","title":"published","text":"<pre><code>published(*args, **kwargs)\n</code></pre> <p>Method to getting published items.</p> Source code in <code>meringue/core/query.py</code> <pre><code>def published(self, *args, **kwargs):\n\"\"\"\n    Method to getting published items.\n    \"\"\"\nnow = timezone.localtime()\nargs = (\n*args,\nQ(date_from__lte=now, date_to__gt=now)\n| Q(date_from__isnull=True, date_to__gt=now)\n| Q(date_from__lte=now, date_to__isnull=True)\n| Q(date_from__isnull=True, date_to__isnull=True),\n)\nreturn self.filter(*args, **kwargs)\n</code></pre>"},{"location":"reference/meringue/core/query/#meringue.core.query.PublicationDatesQuerySet.unpublished","title":"unpublished","text":"<pre><code>unpublished(*args, **kwargs)\n</code></pre> <p>Method for getting unpublished items.</p> Source code in <code>meringue/core/query.py</code> <pre><code>def unpublished(self, *args, **kwargs):\n\"\"\"\n    Method for getting unpublished items.\n    \"\"\"\nnow = timezone.localtime()\nargs = (*args, Q(date_from__gt=now) | Q(date_to__lte=now))\nreturn self.filter(*args, **kwargs)\n</code></pre>"},{"location":"reference/meringue/core/translation/","title":"translation.py","text":""},{"location":"reference/meringue/core/translation/#meringue.core.translation","title":"meringue.core.translation","text":""},{"location":"reference/meringue/core/upload_handlers/","title":"upload_handlers.py","text":""},{"location":"reference/meringue/core/upload_handlers/#meringue.core.upload_handlers","title":"meringue.core.upload_handlers","text":""},{"location":"reference/meringue/core/upload_handlers/#meringue.core.upload_handlers.MemoryFileUploadHandler","title":"MemoryFileUploadHandler","text":"<p>         Bases: <code>uploadhandler.MemoryFileUploadHandler</code></p> <p>File upload handler to stream uploads into memory (used for small files).</p> <p>Examples:</p> settings.py<pre><code>FILE_UPLOAD_HANDLERS = (\n'meringue.core.upload_handlers.MemoryFileUploadHandler',\n'django.core.files.uploadhandler.TemporaryFileUploadHandler',\n)\n</code></pre>"},{"location":"reference/meringue/core/upload_handlers/#meringue.core.upload_handlers.TemporaryFileUploadHandler","title":"TemporaryFileUploadHandler","text":"<p>         Bases: <code>uploadhandler.TemporaryFileUploadHandler</code></p> <p>Upload handler that streams data into a temporary file.</p> <p>Examples:</p> settings.py<pre><code>FILE_UPLOAD_HANDLERS = (\n'django.core.files.uploadhandler.MemoryFileUploadHandler',\n'meringue.core.upload_handlers.TemporaryFileUploadHandler',\n)\n</code></pre>"},{"location":"reference/meringue/core/upload_handlers/#meringue.core.upload_handlers.rename_handler","title":"rename_handler","text":"<pre><code>rename_handler(file_name: str) -&gt; str\n</code></pre> <p>Default method for renaming files when using load handlers MemoryFileUploadHandler and / or TemporaryFileUploadHandler.</p> <p>Attributes:</p> <ul> <li> file_name         \u2013          <p>Original file name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>New file name.</p> </li> </ul> Source code in <code>meringue/core/upload_handlers.py</code> <pre><code>def rename_handler(file_name: str) -&gt; str:\n\"\"\"\n    Default method for renaming files when using load handlers\n    [MemoryFileUploadHandler][meringue.core.upload_handlers.MemoryFileUploadHandler] and / or\n    [TemporaryFileUploadHandler][meringue.core.upload_handlers.TemporaryFileUploadHandler].\n    Attributes:\n        file_name: Original file name.\n    Returns:\n        New file name.\n    \"\"\"\nreturn str(Path(file_name).with_stem(str(uuid.uuid4())))\n</code></pre>"},{"location":"reference/meringue/core/views/","title":"views.py","text":""},{"location":"reference/meringue/core/views/#meringue.core.views","title":"meringue.core.views","text":""},{"location":"reference/meringue/core/views/#meringue.core.views.im_a_teapot","title":"im_a_teapot","text":"<pre><code>im_a_teapot(request)\n</code></pre> <p>We all at some point want to brew boiling water.</p> <p>Examples:</p> urls.py<pre><code>from django.urls import path\nfrom meringue.core.views import im_a_teapot\nurlpatterns = [\npath('make_coffee', im_a_teapot, name=\"make_coffee\"),\n]\n</code></pre> Source code in <code>meringue/core/views.py</code> <pre><code>def im_a_teapot(request):\n\"\"\"\n    We all at some point want to brew boiling water.\n    Examples:\n        ```py title=\"urls.py\"\n        from django.urls import path\n        from meringue.core.views import im_a_teapot\n        urlpatterns = [\n            path('make_coffee', im_a_teapot, name=\"make_coffee\"),\n        ]\n        ```\n    \"\"\"\nreturn HttpResponse(status=418)\n</code></pre>"},{"location":"reference/meringue/core/templatetags/__init__/","title":"__init__.py","text":""},{"location":"reference/meringue/core/templatetags/__init__/#meringue.core.templatetags","title":"meringue.core.templatetags","text":""},{"location":"reference/meringue/core/templatetags/meringue_base/","title":"meringue_base.py","text":""},{"location":"reference/meringue/core/templatetags/meringue_base/#meringue.core.templatetags.meringue_base","title":"meringue.core.templatetags.meringue_base","text":""},{"location":"reference/meringue/core/templatetags/meringue_base/#meringue.core.templatetags.meringue_base.cop_year","title":"cop_year","text":"<pre><code>cop_year() -&gt; str\n</code></pre> <p>A tag that displays the year or range of years for the copyright string in YYYY-YYYY format.</p> <p>For the tag to work, you must fill in the <code>COP_YEAR</code> parameter in the settings.</p> <p>Examples:</p> <pre><code>&lt;p&gt;Copyright \u00a9 {% cop_year %} My company&lt;/p&gt;\n</code></pre> <p>Raises:</p> <ul> <li> <code>Exception</code>           \u2013          <p>To use the <code>cop_year</code> tag, you must fill in the <code>COP_YEAR</code> parameter in the meringue settings</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>Year for copyrights.</p> </li> </ul> Source code in <code>meringue/core/templatetags/meringue_base.py</code> <pre><code>@register.simple_tag\ndef cop_year() -&gt; str:\n\"\"\"\n    A tag that displays the year or range of years for the copyright string in YYYY-YYYY format.\n    For the tag to work, you must fill in the `COP_YEAR` parameter in the settings.\n    Examples:\n        ```jinja\n        &lt;p&gt;Copyright \u00a9 {% cop_year %} My company&lt;/p&gt;\n        ```\n    Raises:\n        Exception: To use the `cop_year` tag, you must fill in the `COP_YEAR` parameter in the\n            meringue settings\n    Returns:\n        Year for copyrights.\n    \"\"\"\nif m_settings.COP_YEAR is None:\nmsg = (\n\"To use the `cop_year` tag, you must fill in the `COP_YEAR` parameter in the \"\n\"meringue settings\"\n)\nraise Exception(msg)\nyear = timezone.localtime().year\nif year == m_settings.COP_YEAR or year - m_settings.COP_YEAR &lt; m_settings.COP_YEARS_DIFF:\nreturn year\nreturn mark_safe(f\"{m_settings.COP_YEAR}&amp;mdash;{year}\")  # noqa: S308\n</code></pre>"},{"location":"reference/meringue/core/templatetags/meringue_base/#meringue.core.templatetags.meringue_base.date_range","title":"date_range","text":"<pre><code>date_range(date_start: dt.date, date_end: dt.date) -&gt; str\n</code></pre> return range of date in one of the following formats <p>DD.MM.YYYY - DD.MM.YYYY DD.MM - DD.MM.YYYY DD - DD.MM.YYYY DD.MM.YYYY</p> <p>Attributes:</p> <ul> <li> date_start         \u2013          <p>Period start date.</p> </li> <li> date_end         \u2013          <p>Period end date.</p> </li> </ul> <p>Examples:</p> <pre><code>{% date_range date_start date_end %}\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>Date period.</p> </li> </ul> Source code in <code>meringue/core/templatetags/meringue_base.py</code> <pre><code>@register.simple_tag\ndef date_range(date_start: dt.date, date_end: dt.date) -&gt; str:\n\"\"\"\n    return range of date in one of the following formats:\n        DD.MM.YYYY - DD.MM.YYYY\n        DD.MM - DD.MM.YYYY\n        DD - DD.MM.YYYY\n        DD.MM.YYYY\n    Attributes:\n        date_start: Period start date.\n        date_end: Period end date.\n    Examples:\n        ```jinja\n        {% date_range date_start date_end %}\n        ```\n    Returns:\n        Date period.\n    \"\"\"\ntmp_result = format_date_from_to(date_start, date_end, \"-\")\nif date_start == date_end:\nreturn tmp_result\ntmp_date_start, tmp_date_end = tmp_result.split(\" - \")\nreturn mark_safe(f\"{tmp_date_start}&amp;nbsp;&amp;mdash; {tmp_date_end}\")  # noqa: S308\n</code></pre>"},{"location":"reference/meringue/core/utils/__init__/","title":"__init__.py","text":""},{"location":"reference/meringue/core/utils/__init__/#meringue.core.utils","title":"meringue.core.utils","text":""},{"location":"reference/meringue/core/utils/datetime/","title":"datetime.py","text":""},{"location":"reference/meringue/core/utils/datetime/#meringue.core.utils.datetime","title":"meringue.core.utils.datetime","text":""},{"location":"reference/meringue/core/utils/datetime/#meringue.core.utils.datetime.format_date_from_to","title":"format_date_from_to","text":"<pre><code>format_date_from_to(\ndate_start: dt.date,\ndate_end: dt.date,\ndelimiter: str = \"-\",\n) -&gt; str\n</code></pre> <p>Method to display date period.</p> <p>Possible output formats depending on the input data:</p> <ul> <li>DD.MM.YYYY - DD.MM.YYYY</li> <li>DD.MM - DD.MM.YYYY</li> <li>DD - DD.MM.YYYY</li> <li>DD.MM.YYYY</li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; print(format_date_from_to(dt.date(2020, 1, 1), dt.date(2020, 2, 1)))\n01.01 - 01.02.2020\n</code></pre> <p>Attributes:</p> <ul> <li> date_start         \u2013          <p>Period start date.</p> </li> <li> date_end         \u2013          <p>Period end date.</p> </li> <li> delimiter         \u2013          <p>Dates delimiter.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>Date period string.</p> </li> </ul> Source code in <code>meringue/core/utils/datetime.py</code> <pre><code>def format_date_from_to(\ndate_start: dt.date,\ndate_end: dt.date,\ndelimiter: str = \"-\",\n) -&gt; str:\n\"\"\"\n    Method to display date period.\n    Possible output formats depending on the input data:\n    * DD.MM.YYYY - DD.MM.YYYY\n    * DD.MM - DD.MM.YYYY\n    * DD - DD.MM.YYYY\n    * DD.MM.YYYY\n    Examples:\n        ```pycon\n        &gt;&gt;&gt; print(format_date_from_to(dt.date(2020, 1, 1), dt.date(2020, 2, 1)))\n        01.01 - 01.02.2020\n        ```\n    Attributes:\n        date_start: Period start date.\n        date_end: Period end date.\n        delimiter: Dates delimiter.\n    Returns:\n        Date period string.\n    \"\"\"\nif date_start.year != date_end.year:\nreturn f\"{date_start:%d.%m.%Y} {delimiter} {date_end:%d.%m.%Y}\"\nif date_start.month != date_end.month:\nreturn f\"{date_start:%d.%m} {delimiter} {date_end:%d.%m.%Y}\"\nif date_start.day != date_end.day:\nreturn f\"{date_start:%d} {delimiter} {date_end:%d.%m.%Y}\"\nreturn f\"{date_end:%d.%m.%Y}\"\n</code></pre>"},{"location":"usage/","title":"Getting Started","text":""},{"location":"usage/#installation","title":"Installation","text":"<pre><code>$ pip install meringue\n</code></pre>"},{"location":"usage/#configuration","title":"Configuration","text":"<p>You can connect individual modules as needed (read more in the documentation of the corresponding module):</p> <pre><code>INSTALLED_APPS = (\n    ...\n    'meringue.core',\n    ...\n)\n</code></pre> <p>All settings for the library are specified inside the <code>MERINGUE</code> parameter (for more details, see the corresponding section):</p> <pre><code>MERINGUE = {\n    ...\n}\n</code></pre>"},{"location":"usage/conf/","title":"Configurations","text":"<p>All settings for Meringue are set inside the <code>MERINGUE</code> parameter of the django settings, and in the project settings it looks something like this:</p> settings.py<pre><code>MERINGUE = {\n'UPLOAD_RENAME_HANDLER': 'my_project.upload_handlers.rename_handler',\n}\n</code></pre> <p>Library settings can be accessed as follows:</p> <pre><code>&gt;&gt;&gt; from meringue.conf import m_settings\n&gt;&gt;&gt; print(m_settings.UPLOAD_RENAME_HANDLER)\nmy_project.upload_handlers.rename_handler\n</code></pre> <p>A complete and up-to-date list of parameters can be found here.</p>"},{"location":"usage/core/","title":"Meringue core","text":"<p>This is a basic package that contains a variety of general purpose functionality such as abstract models, various handlers, utilities, and more.</p>"},{"location":"usage/core/#mixins","title":"Mixins","text":""},{"location":"usage/core/#cmtimemixin","title":"CMTimeMixin","text":"<p>A primitive abstract model that adds the ctime and mtime fields to your model.</p>"},{"location":"usage/core/#sortingmixin","title":"SortingMixin","text":"<p>An abstract model that adds a sortable field, as well as a manager with sorting correction functionality.</p>"},{"location":"usage/core/#correction_sorting","title":"correction_sorting","text":"<p>This is a method to update/fix the sorting of the selected list of items.</p> <p>The sorting will be done according to the <code>queryset</code> sorting, so sorting can be controlled by executing <code>.order_by()</code> before calling the <code>correction_sorting</code> method.</p> <p>The selection for updating sorting can be pre-limited by filtering the list.</p>"},{"location":"usage/core/#publicationmixin","title":"PublicationMixin","text":"<p>Mixin with the functionality of manual publishing.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; FooModel.object.published()\n&gt;&gt;&gt; FooModel.object.unpublished()\n</code></pre>"},{"location":"usage/core/#published","title":"published","text":"<p>Method to getting published items.</p>"},{"location":"usage/core/#unpublished","title":"unpublished","text":"<p>Method for getting unpublished items.</p>"},{"location":"usage/core/#publicationdatesmixin","title":"PublicationDatesMixin","text":"<p>Mixin with the functionality of publishing in a certain period.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; FooModel.object.published()\n&gt;&gt;&gt; FooModel.object.unpublished()\n</code></pre>"},{"location":"usage/core/#published_1","title":"published","text":"<p>Method to getting published items.</p>"},{"location":"usage/core/#unpublished_1","title":"unpublished","text":"<p>Method for getting unpublished items.</p>"},{"location":"usage/core/#utils","title":"Utils","text":""},{"location":"usage/core/#format_date_from_to","title":"format_date_from_to","text":"<p>Method to display date period.</p> <p>Possible output formats depending on the input data:</p> <ul> <li>DD.MM.YYYY - DD.MM.YYYY</li> <li>DD.MM - DD.MM.YYYY</li> <li>DD - DD.MM.YYYY</li> <li>DD.MM.YYYY</li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; print(format_date_from_to(dt.date(2020, 1, 1), dt.date(2020, 2, 1)))\n01.01 - 01.02.2020\n</code></pre> <p>Attributes:</p> <ul> <li> date_start         \u2013          <p>Period start date.</p> </li> <li> date_end         \u2013          <p>Period end date.</p> </li> <li> delimiter         \u2013          <p>Dates delimiter.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>Date period string.</p> </li> </ul>"},{"location":"usage/core/#templatetags","title":"Templatetags","text":""},{"location":"usage/core/#cop_year","title":"cop_year","text":"<p>A tag that displays the year or range of years for the copyright string in YYYY-YYYY format.</p> <p>For the tag to work, you must fill in the <code>COP_YEAR</code> parameter in the settings.</p> <p>Examples:</p> <pre><code>&lt;p&gt;Copyright \u00a9 {% cop_year %} My company&lt;/p&gt;\n</code></pre> <p>Raises:</p> <ul> <li> <code>Exception</code>           \u2013          <p>To use the <code>cop_year</code> tag, you must fill in the <code>COP_YEAR</code> parameter in the meringue settings</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>Year for copyrights.</p> </li> </ul>"},{"location":"usage/core/#date_range","title":"date_range","text":"return range of date in one of the following formats <p>DD.MM.YYYY - DD.MM.YYYY DD.MM - DD.MM.YYYY DD - DD.MM.YYYY DD.MM.YYYY</p> <p>Attributes:</p> <ul> <li> date_start         \u2013          <p>Period start date.</p> </li> <li> date_end         \u2013          <p>Period end date.</p> </li> </ul> <p>Examples:</p> <pre><code>{% date_range date_start date_end %}\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>Date period.</p> </li> </ul>"},{"location":"usage/core/#translations","title":"Translations","text":"<p>If you use djano-modeltranslation, then when connecting <code>meringue.core</code>, you can register fields for translations by setting the list of fields in the <code>m_translate_fields</code> field in the meta of the corresponding model:</p> <pre><code>class FooModel(models.Model):\nname = models.CharField(max_length=32)\nclass Meta:\nm_translate_fields = [\"name\", ]\n</code></pre>"},{"location":"usage/core/#views","title":"Views","text":""},{"location":"usage/core/#im_a_teapot","title":"im_a_teapot","text":"<p>We all at some point want to brew boiling water.</p> <p>Examples:</p> urls.py<pre><code>from django.urls import path\nfrom meringue.core.views import im_a_teapot\nurlpatterns = [\npath('make_coffee', im_a_teapot, name=\"make_coffee\"),\n]\n</code></pre>"}]}